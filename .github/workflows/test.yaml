name: GitHub Actions gem5 Test Run
run-name: Artifact testing
on: [push]
jobs:
  Explore-GitHub-Actions:
    runs-on: [self-hosted, linux, x64]
    # running container with only a single arguement passes the image being used
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest

    steps:
    # checks out repository, should be more useful when
    # running checks on changed files
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # - run: mkdir -p hello

      # - run: echo hello > hello/world.txt

      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: hello-artifact
      #     path: hello/world.txt
      - name: Download artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          # Optional, the status or conclusion of a completed workflow to search for
          # Can be one of a workflow conclusion:
          #   "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required"
          # Or a workflow status:
          #   "completed", "in_progress", "queued"
          # Use the empty string ("") to ignore status or conclusion in the search
          workflow_conclusion: success
          # Optional, will get head commit SHA
          # pr: ${{github.event.pull_request.number}}
          # # Optional, no need to specify if PR is
          # commit: ${{github.event.pull_request.head.sha}}
          # # Optional, will use the specified branch. Defaults to all branches
          # branch: master
          # # Optional, defaults to all types
          # event: push
          # Optional, will use specified workflow run
          # run_id: 1122334455
          # Optional, run number from the workflow
          # run_number: 34
          # Optional, uploaded artifact name,
          # will download all artifacts if not specified
          # and extract them into respective subdirectories
          # https://github.com/actions/download-artifact#download-all-artifacts
          name: hello-artifact
          # Optional, a directory where to extract artifact(s), defaults to the current directory
          # path: extract_here
          # Optional, defaults to current repo
          # repo: ${{ github.repository }}
          # Optional, check the workflow run to whether it has an artifact
          # then will get the last available artifact from the previous workflow
          # default false, just try to download from the last one
          # check_artifacts:  false
          # Optional, search for the last workflow run whose stored an artifact named as in `name` input
          # default false
          # search_artifacts: false
          # Optional, choose to skip unpacking the downloaded artifact(s)
          # default false
          # skip_unpack: false
          # Optional, choose how to exit the action if no artifact is found
          # can be one of:
          #  "fail", "warn", "ignore"
          # default fail
          if_no_artifact_found: fail

      - name: ls
        run: ls
      # - name: Build and run gem5
      #   run: |
      #     scons build/X86/gem5.opt -j $(nproc)

      # - name: Step 3 - Use the Upload Artifact GitHub Action
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: assets-for-download
      #     path: build/X86

      # - name: Run gem5art tests
      #   run: |
      #     mkdir -p .pyenv
      #     python3 -m venv .pyenv
      #     source .pyenv/bin/activate

      # - name: Run gem5art tests
      #   run: |
      #     # Install the packages
      #     pip install -e util/gem5art/artifact
      #     pip install -e util/gem5art/run
      #     pip install -e util/gem5art/tasks

      # - name: Run gem5art tests
      #   run: |
      #     # Run the gem5art artificat tests.
      #     cd util/gem5art/artifact
      #     python3 -m unittest
      #     mypy -p gem5art.artifact

      # - name: Run gem5art tests
      #   run: |
      #     # Run the gem5art run tests.
      #     cd ../run
      #     python3 -m unittest
      #     mypy -p gem5art.run

      # - name: Run gem5art tests
      #   run: |
      #     # Run the gem5art task tests.
      #     cd ../tasks
      #     python3 -m unittest
      #     mypy -p gem5art.tasks

      # - name: Download a single artifact
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: assets-for-download
      # # double checking that steps are run chronologically
      # - name: Run gem5 separately (memory_traffic.py)
      #   run: |
      #     build/X86/gem5.opt configs/learning_gem5/part1/simple.py

      - run: echo "üçè This job's status is ${{ job.status }}."
