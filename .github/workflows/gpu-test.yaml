# This workflow runs all of the very-long tests within main.py

name: Running gpu tests
run-name: ${{ github.actor }} is running the updated workflow gpu tests

on:
  # Runs every Sunday from 7AM UTC
  push:
  workflow_dispatch:

jobs: # add cleaning step to end of each job, also which things can be added to gem5 resources
  build-gem5:
    runs-on: [self-hosted, linux, x64, build]
    container: mkjost/testing-gpu-image:latest
    timeout-minutes: 4320 # 3 days
    outputs:
      build-name: ${{ steps.artifact-name.outputs.name }}
    steps:
      - uses: actions/checkout@v3
        with:
          # Scheduled workflows run on the default branch by default. We
          # therefore need to explicitly checkout the develop branch.
          ref: develop
      - id: artifact-name
        run: echo "name=$(date +"%Y-%m-%d_%H.%M.%S")-ALL" >> $GITHUB_OUTPUT
      - name: Build gem5.opt
        working-directory: ${{ github.workspace }}
        run: scons build/GCN3_X86/gem5.opt -j4 --ignore-style || rm -rf build && scons build/GCN3_X86/gem5.opt -j4 --ignore-style
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact-name.outputs.name }}
          path: build/GCN3_X86/gem5.opt
          retention-days: 5

  # LULESH-tests:
  #   runs-on: [self-hosted, linux, x64, build]
  #   container: mkjost/testing-gpu-image:latest
  #   needs: build-gem5
  #   timeout-minutes: 4320 # 3 days
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         # Scheduled workflows run on the default branch by default. We
  #         # therefore need to explicitly checkout the develop branch.
  #         ref: develop
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: ${{needs.build-gem5.outputs.build-name}}
  #         path: build/GCN3_X86
  #     - run: chmod u+x build/GCN3_X86/gem5.opt
  #     - name: checkout gem5 resources
  #       working-directory: ${{ github.workspace }}
  #       run: |
  #         git clone https://gem5.googlesource.com/public/gem5-resources
  #         cd gem5-resources
  #         git checkout develop
  #         mkdir src/gpu/lulesh/bin
  #     - name: download lulesh
  #       working-directory: ${{github.workspace}}/gem5-resources/src/gpu/lulesh/bin
  #       run: wget http://dist.gem5.org/dist/v21-1/test-progs/lulesh/lulesh
  #     - name: Run LULUESH tests
  #       working-directory: ${{ github.workspace }}
  #       run: |
  #         # wget http://dist.gem5.org/dist/v21-1/test-progs/lulesh/lulesh
  #         build/GCN3_X86/gem5.opt configs/example/apu_se.py -n3 --mem-size=8GB --reg-alloc-policy=dynamic --benchmark-root="gem5-resources/src/gpu/lulesh/bin" -c lulesh

  # DNNMark-tests:
  #   runs-on: [self-hosted, linux, x64, build]
  #   container:
  #     image: mkjost/testing-gpu-image:latest
  #     # volumes:
  #     #   - ${{ github.workspace }}:${{ github.workspace }}
  #     #   - ${{ github.workspace }}/cachefiles:/~/.cache/miopen/2.9.0
  #   # needs: build-gem5
  #   timeout-minutes: 4320 # 3 days
  #   steps:
  #     - name: Clean runner
  #       run:
  #         rm -rf ./* || true
  #         rm -rf ./.??* || true
  #         rm -rf ~/.cache || true
  #         rm -rf ${{ github.workspace }}/gem5-resources || true
  #         mkdir ~/.cache/miopen/2.9.0
  #     - uses: actions/checkout@v3
  #       with:
  #         # Scheduled workflows run on the default branch by default. We
  #         # therefore need to explicitly checkout the develop branch.
  #         ref: develop
  #     - name: Build gem5.opt
  #       working-directory: ${{ github.workspace }}
  #       run: scons build/GCN3_X86/gem5.opt -j4 --ignore-style || rm -rf build && scons build/GCN3_X86/gem5.opt -j4 --ignore-style

  #     # - uses: actions/download-artifact@v3
  #     #   with:
  #     #     name: ${{needs.build-gem5.outputs.build-name}}
  #     #     path: build/GCN3_X86
  #     # - run: chmod u+x build/GCN3_X86/gem5.opt
  #     - name: checkout gem5 resources
  #       working-directory: ${{ github.workspace }}
  #       run: |
  #         git clone https://gem5.googlesource.com/public/gem5-resources
  #         cd gem5-resources
  #         git checkout develop
  #     - name: Compile m5ops and x86
  #       working-directory: ${{ github.workspace }}/util/m5
  #       run: |
  #         export TERM=xterm-256color
  #         scons build/x86/out/m5
  #     - name: Setup cmark for DNNMark #potentially can combine all these steps
  #       working-directory: ${{ github.workspace }}/gem5-resources/src/gpu/DNNMark
  #       run: ./setup.sh HIP
  #     - name: Make the DNNMark library
  #       working-directory: ${{ github.workspace }}/gem5-resources/src/gpu/DNNMark/build
  #       run: make -j4
  #     - name: Generate cachefiles #iffy on working directory
  #       working-directory: ${{ github.workspace }}/gem5-resources/src/gpu/DNNMark/
  #       run: python3 generate_cachefiles.py cachefiles.csv --gfx-version=gfx801 --num-cus=4
  #     - name: Generate mmap data
  #       working-directory: ${{ github.workspace }}/gem5-resources/src/gpu/DNNMark
  #       run: |
  #         g++ -std=c++0x generate_rand_data.cpp -o generate_rand_data
  #         ./generate_rand_data
  #     - name: Run DNNMark
  #       working-directory: ${{ github.workspace }}/gem5-resources/src/gpu/DNNMark
  #       run: |
  #         ../../../../build/GCN3_X86/gem5.opt ../../../../configs/example/apu_se.py -n3 --reg-alloc-policy=dynamic --benchmark-root="build/benchmarks/test_fwd_softmax" -c dnnmark_test_fwd_softmax --options="-config config_example/softmax_config.dnnmark -mmap mmap.bin"
  #         ../../../../build/GCN3_X86/gem5.opt ../../../../configs/example/apu_se.py -n3 --reg-alloc-policy=dynamic --benchmark-root="build/benchmarks/test_fwd_pool" -c dnnmark_test_fwd_pool --options="-config config_example/pool_config.dnnmark -mmap mmap.bin"
  #         ../../../../build/GCN3_X86/gem5.opt ../../../../configs/example/apu_se.py -n3 --reg-alloc-policy=dynamic --benchmark-root="build/benchmarks/test_bwd_bn" -c dnnmark_test_bwd_bn --options="-config config_example/bn_config.dnnmark -mmap mmap.bin"

  HACC-tests:
    runs-on: [self-hosted, linux, x64, build]
    container: mkjost/testing-gpu-image:latest
    needs: build-gem5
    timeout-minutes: 4320 # 3 day
    steps:
      - uses: actions/checkout@v3
        with:
          # Scheduled workflows run on the default branch by default. We
          # therefore need to explicitly checkout the develop branch.
          ref: develop
      - uses: actions/download-artifact@v3
        with:
          name: ${{needs.build-gem5.outputs.build-name}}
          path: build/GCN3_X86
      - run: chmod u+x build/GCN3_X86/gem5.opt
      - name: checkout gem5 resources
        working-directory: ${{ github.workspace }}
        run: |
          git clone https://gem5.googlesource.com/public/gem5-resources
          cd gem5-resources
          git checkout develop
          mkdir src/gpu/halo-finder/src/hip
      - name: Compile m5ops and x86
        working-directory: ${{ github.workspace }}/util/m5
        run: |
          export TERM=xterm-256color
          scons build/x86/out/m5
      # - name: Build HACC
      #   working-directory: ${{ github.workspace }}/gem5-resources/src/gpu/halo-finder/src/hip
      #   run: make hip/ForceTreeTest
      - name: Download tests
        working-directory: ${{ github.workspace }}/gem5-resources/src/gpu/halo-finder/src/hip
        run: wget http://dist.gem5.org/dist/v22-1/test-progs/halo-finder/ForceTreeTest
      - name: Run HACC tests
        working-directory: ${{ github.workspace }}
        run: |
          build/GCN3_X86/gem5.opt configs/example/apu_se.py -n3 --reg-alloc-policy=dynamic --benchmark-root=gem5-resources/src/gpu/halo-finder/src/hip -c ForceTreeTest --options="0.5 0.1 64 0.1 1 N 12 rcb"

  # pannotia-tests:
  #   runs-on: [self-hosted, linux, x64, build]
  #   container: mkjost/testing-gpu-image:latest
  #   # needs: build-gem5
  #   timeout-minutes: 4320 # 3 days
  #   strategy:
  #     matrix:
  #       test-name: [BC, "Color Max", "Color Max Min", FW, MIS, "PageRank Default", "PageRank (SPMV)", "SSSP (CSR)", "SSSP (ELL)"]
  #       include:
  #         - export: export GEM5_PATH=${{ github.workspace }}
  #         - test-name: BC
  #           working-directory: /pannotia/bc
  #           command-line: --benchmark-root=gem5-resources/src/gpu/pannotia/bc/bin -c bc.gem5 --options="1k_128k.gr"
  #         - test-name: "Color Max"
  #           working-directory: /pannotia/color
  #           command-line: --benchmark-root=gem5-resources/src/gpu/pannotia/color/bin -c color_max.gem5 --options="1k_128k.gr 0"
  #         - test-name: "Color Max Min"
  #           working-directory: /pannotia/color
  #           export: export GEM5_PATH=${{ github.workspace }}; export VARIANT=MAXMIN
  #           command-line: --benchmark-root=gem5-resources/src/gpu/pannotia/color/bin -c color_maxmin.gem5 --options="1k_128k.gr 0"
  #         - test-name: FW
  #           working-directory: /pannotia/fw
  #           command-line: --benchmark-root=gem5-resources/src/gpu/pannotia/fw/bin -c fw_hip.gem5 --options="1k_128k.gr"
  #         - test-name: MIS
  #           working-directory: /pannotia/mis
  #           command-line: --benchmark-root=gem5-resources/src/gpu/pannotia/mis/bin -c mis_hip.gem5 --options="1k_128k.gr 0"
  #         - test-name: "PageRank Default"
  #           working-directory: /pannotia/pagerank
  #           command-line: --benchmark-root=gem5-resources/src/gpu/pannotia/pagerank/bin -c pagerank.gem5 --options="coAuthorsDBLP.graph 1"
  #         - test-name: "PageRank (SPMV)"
  #           working-directory: /pannotia/pagerank
  #           export: export GEM5_PATH=${{ github.workspace }}; export VARIANT=SPMV
  #           command-line: --benchmark-root=gem5-resources/src/gpu/pannotia/pagerank/bin -c pagerank_spmv.gem5 --options="coAuthorsDBLP.graph 1"
  #         - test-name: "SSSP (CSR)"
  #           working-directory: /pannotia/sssp
  #           export: export GEM5_PATH=${{ github.workspace }}; export VARIANT=CSR
  #           command-line: --benchmark-root=${gem5_root}/gem5-resources/src/gpu/pannotia/sssp/bin -c sssp.gem5 --options="1k_128k.gr 0"
  #         - test-name: "SSSP (ELL)"
  #           working-directory: /pannotia/sssp
  #           export: export GEM5_PATH=${{ github.workspace }}; export VARIANT=ELL
  #           command-line: --benchmark-root=gem5-resources/src/gpu/pannotia/sssp/bin -c sssp_ell.gem5 --options="1k_128k.gr 0"
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         # Scheduled workflows run on the default branch by default. We
  #         # therefore need to explicitly checkout the develop branch.
  #         ref: develop
  #     - name: Build gem5.opt
  #       working-directory: ${{ github.workspace }}
  #       run: scons build/GCN3_X86/gem5.opt -j4 --ignore-style --duplicate-sources || rm -rf build && scons build/GCN3_X86/gem5.opt -j4 --ignore-style --duplicate-sources
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: ${{needs.build-gem5.outputs.build-name}}
  #         path: build/GCN3_X86
  #     - run: chmod u+x build/GCN3_X86/gem5.opt
  #     - name: checkout gem5 resources
  #       working-directory: ${{ github.workspace }}
  #       run: |
  #         git clone https://gem5.googlesource.com/public/gem5-resources
  #         cd gem5-resources
  #         git checkout develop
  #     - name: Compile m5ops and x86
  #       working-directory: ${{ github.workspace }}/util/m5
  #       run: |
  #         export TERM=xterm-256color
  #         scons build/x86/out/m5


  #     # test pannotia
  #     - name: Build ${{ matrix.test-name }}
  #       working-directory: ${{ github.workspace }}/gem5-resources/src/gpu${{ matrix.working-directory }}
  #       run: |
  #         export GEM5_PATH=${{ github.workspace }}
  #         make gem5-fusion
  #     - name: Run ${{ matrix.test-name }}
  #       working-directory: ${{ github.workspace }}
  #       run: |
  #         wget http://dist.gem5.org/dist/develop/datasets/pannotia/bc/1k_128k.gr # for bc
  #         wget http://dist.gem5.org/dist/develop/datasets/pannotia/pagerank/coAuthorsDBLP.graph # for pagerank
  #         build/GCN3_X86/gem5.opt configs/example/apu_se.py -n3 --mem-size=8GB --reg-alloc-policy=dynamic ${{ matrix.command-line }}

  # dramsys-check:
  #   runs-on: [self-hosted, linux, x64, build]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   # needs: build-gem5
  #   timeout-minutes: 4320 # 3 days
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         # Scheduled workflows run on the default branch by default. We
  #         # therefore need to explicitly checkout the develop branch.
  #         ref: develop

  #     - name: Checkout DRAMSys
  #       working-directory: ${{ github.workspace }}/ext/dramsys
  #       run: |
  #         git clone --recursive https://github.com/tukl-msd/DRAMSys DRAMSys
  #         cd DRAMSys
  #         git checkout -b gem5 09f6dcbb91351e6ee7cadfc7bc8b29d97625db8f
  #         git submodule update --init --recursive

  #     - name: Run DRAMSys Checks
  #       working-directory: ${{ github.workspace }}
  #       run: |
  #         scons build/ALL/gem5.opt -j4 --duplicate-sources
  #         ./build/ALL/gem5.opt configs/example/gem5_library/dramsys/arm-hello-dramsys.py
  #         ./build/ALL/gem5.opt configs/example/gem5_library/dramsys/dramsys-traffic.py
  #         ./build/ALL/gem5.opt configs/example/dramsys.py
