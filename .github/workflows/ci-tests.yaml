# name: CI Tests
# run-name: CI-Tests

# #  allows us to repeat this daily at 2am
# #  https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
# on:
#   schedule:
#     - cron:  '0 */12 * * *'

# # This replaces presubmit.sh, and is missing the gem5art tests
# jobs:
#   Unit-Tests:
#     runs-on: [self-hosted, linux, x64, run]
#     # running container with only a single arguement passes the image being used
#     container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
#     timeout-minutes: 1440 # 24 hours

#     steps:
#     # checks out repository, should be more useful when
#     # running checks on changed files
#       - uses: actions/checkout@v3
#         with:
#           fetch-depth: 0

#       - name: test nightly unit test opt
#         run: |
#           scons build/ALL/unittests.opt --ignore-style

#       - name: nightly unit test debug
#         run: scons build/ALL/unittests.opt --ignore-style

#       - name: quick tests
#         run: |
#           cd tests
#           ./main.py run --length=quick -vv

#       - name: Run Pre Commit Tests
#         run: |
#           cd tests
#           ./main.py run gem5 -vv && scons -C .. --no-compress-debug --ignore-style build/ARM/unittests.opt

#       - run: echo "üçè This job's status is ${{ job.status }}."

#   Compiler-Tests:
#     runs-on: [self-hosted, linux, x64, build]
#     # container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
#     timeout-minutes: 1440 # 24 hours

#     steps:
#     # checks out repository, should be more useful when
#     # running checks on changed files
#       # - uses: actions/checkout@v3
#       #   with:
#       #     fetch-depth: 0

#       - name: Compiler Tests
#         run: |
#           cd tests
#           chmod u+x compiler-tests.sh
#           ./compiler-tests.sh -j $(nproc)

#       # upload test dir
#       - uses: actions/upload-artifact@v3
#         with:
#           name: compiler-test-artifact
#           path: .compile-test-out


# This workflow runs after a pull-request has been approved by a reviewer.

name: CI Tests
run-name: ${{ github.actor }} is running Pull Request pre-merge tests

on: [push]
  # schedule:
  #   - cron:  '0 */12 * * *'

jobs:
  Test-Upload:
    runs-on: [self-hosted, linux, x64, build]
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build and run gem5
        run: |
          scons build/ALL/gem5.opt -j $(nproc)
      - uses: actions/upload-artifact@v3
        with:
          name: gem5-artifact
          path: build/ALL
      - run: echo "üçè This job's status is ${{ job.status }}."

  unittests-all-opt:
    runs-on: [self-hosted, Linux, X64]
    container:
      image: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v3
    - name: CI Unittests
      working-directory: ${{ github.workspace }}
      run: scons build/ALL/unittests.opt -j $(nproc)        # How to add threads here?
    - run: echo "This job's status is ${{ job.status }}."

  testlib-quick:
    runs-on: [self-hosted, Linux, X64]
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    needs: Test-Upload
    timeout-minutes: 360     # 6 hours
    steps:
    - uses: actions/checkout@v3
    - uses: actions/download-artifact@v3
      with:
        name: gem5-artifact
        path: build/ALL
    - run: chmod u+x build/ALL/gem5.opt
    - name: The TestLib CI Tests
      working-directory: ${{ github.workspace }}/tests
      run: ./main.py run --skip-build        # How to add threads here?
    - run: echo "This job's status is ${{ job.status }}."

  gem5art-unittests:
    runs-on: [self-hosted, Linux, X64]
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - name: Setup the virtual environment
      working-directory: ${{ github.workspace }}
      run: |
        mkdir -p .pyenv
        python3 -m venv .pyenv
        source .pyenv/bin/activate
    - name: Install the packages
      working-directory: ${{ github.workspace }}
      run: |
        pip install -e util/gem5art/artifact
        pip install -e util/gem5art/run
        pip install -e util/gem5art/tasks
    - run: echo "This job's status is ${{ job.status }}."
    - name: The gem5art.artifact Unittests
      working-directory: ${{ github.workspace }}/util/gem5art/artifact
      run: |
        python3 -m unittest
        mypy -p gem5art.artifact
    - name: The gem5art.run Unittests
      working-directory: ${{ github.workspace }}/util/gem5art/run
      run: |
        python3 -m unittest
        mypy -p gem5art.run
    - name: The gem5art.tasks Unittests
      working-directory: ${{ github.workspace }}/util/gem5art/tasks
      run: |
        python3 -m unittest
        mypy -p gem5art.tasks
    - run: echo "This job's status is ${{ job.status }}."