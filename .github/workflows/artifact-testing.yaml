name: artifact naming
run-name: testing change id
# name: Github Artifacting Tests
# run-name: Testing artifact usage
#  https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
on:
  push:
  workflow_dispatch:

# This file is an example of using artifact in different runs, for us to utilize in
# separating jobs amongst different runner
jobs:
  build-gem5:
    runs-on: [self-hosted, linux, x64, build]
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    steps:
      - uses: actions/checkout@v3
      - name: tesssst

        run: |
          echo hello
      - name: testing
        env:
          JSON: ${{ toJSON(github.event.commits) }}
          token: "Change-Id"
          pattern: ".*"
        run: |
          apt install jq -y
          echo ${{ toJSON(github.event.commits) }} | sed -z 's/\n/\\n/g; s/"//g' >> testing.json
          for i in $(jq -r ".[] | .message" testing.json)
          do
            echo "hello"
            echo $i > commit-message.txt
            git interpret-trailers --parse commit-message.txt | grep -q "^${{ env.token }}: ${{ env.pattern }}$"
          done
          echo "outside loop"

      # outputs all commit messages in pr
      # https://stackoverflow.com/questions/71571528/iterate-on-github-event-commits-in-github-action-script
      - uses: actions/github-script@v6
        with:
          script: |
            const commits = ${{ toJSON(github.event.commits) }}
            for (const commit of commits) {
              git interpret-trailers --parse commit-message.txt | grep -q "^${{ env.token }}: ${{ env.pattern }}$"
            }
  # build-gem5:
  #   runs-on: [self-hosted, linux, x64, build]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   outputs:
  #     build-name: ${{ steps.artifact-name.outputs.name }}
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         # Scheduled workflows run on the default branch by default. We
  #         # therefore need to explicitly checkout the develop branch.
  #         ref: develop
  #     - id: artifact-name
  #       run: echo "name=$(date +"%Y-%m-%d_%H.%M.%S")-ALL" >> $GITHUB_OUTPUT
  #     - name: Build gem5
  #       run: |
  #         scons build/ALL/gem5.opt -j$(nproc)
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ steps.artifact-name.outputs.name }}
  #         path: build/ALL/gem5.opt
  #         retention-days: 5
  #     - run: echo "This job's status is ${{ job.status }}."

  # build-gem5-ALL_MESI_Two_Level:
  #   runs-on: [self-hosted, linux, x64, build,]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   outputs:
  #     build-name: ${{ steps.artifact-name.outputs.name }}
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         # Scheduled workflows run on the default branch by default. We
  #         # therefore need to explicitly checkout the develop branch.
  #         ref: develop
  #     - id: artifact-name
  #       run: echo "name=$(date +"%Y-%m-%d_%H.%M.%S")-ALL_MESI_Two_Level" >> $GITHUB_OUTPUT
  #     - name: Build gem5
  #       run: |
  #         scons build/ALL_MESI_Two_Level/gem5.opt --default=ALL PROTOCOL=MESI_Two_Level -j $(nproc)
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ steps.artifact-name.outputs.name }}
  #         path: build/ALL_MESI_Two_Level/gem5.opt
  #         retention-days: 5
  #     - run: echo "This job's status is ${{ job.status }}."

  # testlib-long-gem5_library_example_tests:
  #   runs-on: [self-hosted, linux, x64, build]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   needs: [build-gem5, build-gem5-ALL_MESI_Two_Level]
  #   timeout-minutes: 1440 # 24 hours
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       # Scheduled workflows run on the default branch by default. We
  #       # therefore need to explicitly checkout the develop branch.
  #       ref: develop
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.build-gem5.outputs.build-name}}
  #       path: build/ALL
  #   - run: chmod u+x build/ALL/gem5.opt
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.build-gem5-ALL_MESI_Two_Level.outputs.build-name}}
  #       path: build/ALL_MESI_Two_Level
  #   - run: chmod u+x build/ALL_MESI_Two_Level/gem5.opt
  #   - name: long gem5_library_example_tests
  #     working-directory: ${{ github.workspace }}/tests
  #     run: ./main.py run gem5/gem5_library_example_tests --length=long --skip-build -vv -t $(nproc)
  #   - name: create zip of results
  #     if: success() || failure()
  #     run: |
  #       apt-get -y install zip
  #       zip -r output.zip tests/testing-results
  #   - name: upload zip
  #     if: success() || failure()
  #     uses: actions/upload-artifact@v3
  #     env:
  #       MY_STEP_VAR: ${{github.job}}_COMMIT.${{github.sha}}_RUN.${{github.run_id}}_ATTEMPT.${{github.run_attempt}}
  #     with:
  #       name: ${{ env.MY_STEP_VAR }}
  #       path: output.zip
  #       retention-days: 7
  #   - run: echo "This job's status is ${{ job.status }}."