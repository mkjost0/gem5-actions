name: CI Tests

on: [push]
  # pull_request:
  #   types: [opened, edited, synchronize, ready_for_review]

jobs:
  # ensures we have a change-id in every commit, needed for gerrit
  check-for-change-id:
    # runs on github hosted runner
    runs-on: [self-hosted, linux, x64, build]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # - name: Check for Change-Id
      #   run: |
      #     for commit in $(git rev-list ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}); do
      #         git checkout $commit
      #         if !(git log -1 --pretty=format:"%B" | grep -q "Change-Id: ")
      #         then
      #           echo "One or more of the commits in this pull request is missing a Change-ID, which we require for any changes made to gem5. "\
      #           "To automatically insert one, run the following:\n f=`git rev-parse --git-dir`/hooks/commit-msg ; mkdir -p $(dirname $f) ; "\
      #           "curl -Lo $f https://gerrit-review.googlesource.com/tools/hooks/commit-msg ; chmod +x $f\n Then amend the commit with git commit --amend --no-edit, and update your pull request."
      #           exit 1
      #         fi
      #     done
      - name: Download stuff
        run: |
          wget https://dist.gem5.org/dist/develop/images/x86/ubuntu-18-04/x86-ubuntu.img.gz --no-check-certificate
      - name: Delete stuff
        run: |
          ls -la ./
          ls -la /actions_runner/_work/_temp/_github_home/.cache
          rm -rf ./* || true
          rm -rf ./.??* || true
          rm -rf ~/.cache
          ls -la ./
          # for commit in $(git rev-list ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}); do
          #     git checkout $commit
          #     if !(git log -1 --pretty=format:"%s" | grep -q "Change-Id: ")
          #     then
          #       echo "One or more of the commits in this pull request is missing a Change-ID, which we require for any changes made to gem5. "\
          #       "To automatically insert one, run the following:\n f=`git rev-parse --git-dir`/hooks/commit-msg ; mkdir -p $(dirname $f) ; "\
          #       "curl -Lo $f https://gerrit-review.googlesource.com/tools/hooks/commit-msg ; chmod +x $f\n Then amend the commit with git commit --amend --no-edit, and update your pull request."
          #       exit 1
          #     fi
          # done


# name: 'Github Workflow History'

# 'on':
#   push:
#     inputs:
#       failJob:
#         description: Fail the job?
#         type: boolean
#         required: true
#         default: false

# jobs:
#   exampleJob:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Pass or fail job
#         run: exit 1
#         if: github.event.inputs.failJob == 'true'

#       - name: Check last job status
#         id: lastJobStatus
#         if: always()
#         run: |
#           LAST_JOB_STATUS=$(gh run list --workflow daily-tests.yaml | grep -oh "completed.*" | head -1 | awk '{print $2}')
#           THIS_JOB_STATUS="${{ job.status }}"
#           if [ "$LAST_JOB_STATUS" != "$THIS_JOB_STATUS" ]; then
#             echo "status changed from $LAST_JOB_STATUS to $THIS_JOB_STATUS"
#           else
#             echo "status is still $THIS_JOB_STATUS"
#           fi
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       - name: Showcase output variable
#         if: always() && steps.lastJobStatus.outputs.changedState == 'true'
#         run: echo "CHANGED STATE!!!"














# name: artifact naming
# run-name: testing change id
# # name: Github Artifacting Tests
# # run-name: Testing artifact usage
# #  https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
# on:
#   # push:
#   workflow_dispatch:
#   pull_request:
#     types: [opened, edited, synchronize, ready_for_review]
#   # pull_request:
#   #   types: [opened, edited, synchronize]

# # This file is an example of using artifact in different runs, for us to utilize in
# # separating jobs amongst different runner
# jobs:
#   check-for-change-id:
#     runs-on: ubuntu-latest
#     # container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
#     steps:
#   #     - uses: actions/checkout@v3
#   # #       with:
#   # # #         # Scheduled workflows run on the default branch by default. We
#   # # #         # therefore need to explicitly checkout the develop branch.
#   # #         ref: ghjghjfhj
#   #     - name: Test
#   #       env:
#   #         GH_TOKEN: ${{ github.token }}
#   #       run: |
#   #         gh pr view --json commits
#       - name: Test
#         run: |
#           commits=${{join(github.event.commits.*.message, ', ') }}
#           echo $commits
#       - uses: actions/github-script@v6
#         env:
#           token: "Change-Id"
#           pattern: ".*"
#         with:
#           script: |
#             const commits = ${{ toJSON( github.event.pull_request.commits) }}
#             for (const commit of commits) {
#               const id = "Change-Id: "
#               const message = commit.message;
#               if (!message.includes(id)) {
#                 core.setFailed('One or more of the commits in this pull request is missing a Change-ID, which we require for any changes made to gem5. ' +
#                 'To automatically insert one, run the following:\n f=`git rev-parse --git-dir`/hooks/commit-msg ; mkdir -p $(dirname $f) ; ' +
#                 'curl -Lo $f https://gerrit-review.googlesource.com/tools/hooks/commit-msg ; chmod +x $f\n Then amend the commit with git commit --amend --no-edit, and update your pull request.')
#               }
#             }

  # build-gem5:
  #   runs-on: [self-hosted, linux, x64, build]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   outputs:
  #     build-name: ${{ steps.artifact-name.outputs.name }}
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         # Scheduled workflows run on the default branch by default. We
  #         # therefore need to explicitly checkout the develop branch.
  #         ref: develop
  #     - id: artifact-name
  #       run: echo "name=$(date +"%Y-%m-%d_%H.%M.%S")-ALL" >> $GITHUB_OUTPUT
  #     - name: Build gem5
  #       run: |
  #         scons build/ALL/gem5.opt -j$(nproc)
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ steps.artifact-name.outputs.name }}
  #         path: build/ALL/gem5.opt
  #         retention-days: 5
  #     - run: echo "This job's status is ${{ job.status }}."

  # build-gem5-ALL_MESI_Two_Level:
  #   runs-on: [self-hosted, linux, x64, build,]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   outputs:
  #     build-name: ${{ steps.artifact-name.outputs.name }}
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         # Scheduled workflows run on the default branch by default. We
  #         # therefore need to explicitly checkout the develop branch.
  #         ref: develop
  #     - id: artifact-name
  #       run: echo "name=$(date +"%Y-%m-%d_%H.%M.%S")-ALL_MESI_Two_Level" >> $GITHUB_OUTPUT
  #     - name: Build gem5
  #       run: |
  #         scons build/ALL_MESI_Two_Level/gem5.opt --default=ALL PROTOCOL=MESI_Two_Level -j $(nproc)
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ steps.artifact-name.outputs.name }}
  #         path: build/ALL_MESI_Two_Level/gem5.opt
  #         retention-days: 5
  #     - run: echo "This job's status is ${{ job.status }}."

  # testlib-long-gem5_library_example_tests:
  #   runs-on: [self-hosted, linux, x64, build]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   needs: [build-gem5, build-gem5-ALL_MESI_Two_Level]
  #   timeout-minutes: 1440 # 24 hours
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       # Scheduled workflows run on the default branch by default. We
  #       # therefore need to explicitly checkout the develop branch.
  #       ref: develop
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.build-gem5.outputs.build-name}}
  #       path: build/ALL
  #   - run: chmod u+x build/ALL/gem5.opt
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.build-gem5-ALL_MESI_Two_Level.outputs.build-name}}
  #       path: build/ALL_MESI_Two_Level
  #   - run: chmod u+x build/ALL_MESI_Two_Level/gem5.opt
  #   - name: long gem5_library_example_tests
  #     working-directory: ${{ github.workspace }}/tests
  #     run: ./main.py run gem5/gem5_library_example_tests --length=long --skip-build -vv -t $(nproc)
  #   - name: create zip of results
  #     if: success() || failure()
  #     run: |
  #       apt-get -y install zip
  #       zip -r output.zip tests/testing-results
  #   - name: upload zip
  #     if: success() || failure()
  #     uses: actions/upload-artifact@v3
  #     env:
  #       MY_STEP_VAR: ${{github.job}}_COMMIT.${{github.sha}}_RUN.${{github.run_id}}_ATTEMPT.${{github.run_attempt}}
  #     with:
  #       name: ${{ env.MY_STEP_VAR }}
  #       path: output.zip
  #       retention-days: 7
  #   - run: echo "This job's status is ${{ job.status }}."
