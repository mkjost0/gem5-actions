name: CI Tests

on:
  push:
  # workflow_dispatch:
  # pull_request:
  #   types: [opened, edited, synchronize, ready_for_review]

# This workflow runs all of the long tests within main.py, extra tests in nightly.sh, and unittests

name: Daily Tests

on:
  # Runs every day from 7AM UTC
  schedule:
    - cron:  '0 7 * * *'

jobs:
  name-artifacts:
    runs-on: ubuntu-latest
    outputs:
      build-name: ${{ steps.artifact-name.outputs.name }}
    steps:
    - uses: actions/checkout@v2
    - id: artifact-name
      run: echo "name=$(date +"%Y-%m-%d_%H.%M.%S-")" >> $GITHUB_OUTPUT

  build-gem5:
    strategy:
      matrix:
        image: [ALL, ALL_CHI, ARM, ALL_MSI, ALL_MESI_Two_Level, NULL_MI_example, RISCV, VEGA_X86] #note: NULL doesn't work
        include:
          - command-line: -j $(nproc)
          - image: ALL_CHI
            command-line: --default=ALL PROTOCOL=CHI -j $(nproc)
          - image: ALL_MSI
            command-line: --default=ALL PROTOCOL=MSI -j $(nproc)
          - image: ALL_MESI_Two_Level
            command-line: --default=ALL PROTOCOL=MESI_Two_Level -j $(nproc)
          - image: NULL_MI_example
            command-line: --default=NULL PROTOCOL=MI_example -j $(nproc)
    runs-on: [self-hosted, linux, x64, build]
    needs: name-artifacts
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Scheduled workflows run on the default branch by default. We
          # therefore need to explicitly checkout the develop branch.
          ref: develop
      - name: Build gem5
        run: |
          scons build/${{ matrix.image }}/gem5.opt ${{ matrix.command-line }}
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.name-artifacts.outputs.build-name }}${{ matrix.image }}
          path: build/${{ matrix.image }}/gem5.opt
          retention-days: 5
      - run: echo "This job's status is ${{ job.status }}."

  # NULL build added separately since NULL is a keyword in yaml files
  build-gem5-NULL:
    runs-on: [self-hosted, linux, x64, build]
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    needs: name-artifacts
    steps:
      - uses: actions/checkout@v3
        with:
          # Scheduled workflows run on the default branch by default. We
          # therefore need to explicitly checkout the develop branch.
          ref: develop
      - name: Build gem5
        run: |
          scons build/NULL/gem5.opt -j $(nproc)
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.name-artifacts.outputs.build-name }}NULL
          path: build/NULL/gem5.opt
          retention-days: 5
      - run: echo "This job's status is ${{ job.status }}."

  unittests-all-debug:
    strategy:
      matrix:
        type: [fast, debug]
    runs-on: [self-hosted, linux, x64, run]
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          # Scheduled workflows run on the default branch by default. We
          # therefore need to explicitly checkout the develop branch.
          ref: develop
      - name: ALL/unittests.${{ matrix.type }} UnitTests
        run: scons build/ALL/unittests.${{ matrix.type }} -j $(nproc)

# start running all of the long tests
  testlib-long-tests:
    strategy:
      matrix:
        test-type: [arm-boot-tests, fs, gem5_library_example_tests, gpu, insttest_se, learning_gem5, m5threads_test_atomic, memory, multi_isa, replacement-policies, riscv-boot-tests, stdlib, x86-boot-tests]
    runs-on: [self-hosted, linux, x64, run]
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    needs: [build-gem5, build-gem5-NULL]
    timeout-minutes: 1440 # 24 hours
    steps:
    - uses: actions/checkout@v3
      with:
        # Scheduled workflows run on the default branch by default. We
        # therefore need to explicitly checkout the develop branch.
        ref: develop
    # download all artifacts for each test
    - uses: actions/download-artifact@v3
      with:
        name: ${{needs.name-artifacts.outputs.build-name}}ALL
        path: build/ALL
    - run: chmod u+x build/ALL/gem5.opt
    - uses: actions/download-artifact@v3
      with:
        name: ${{needs.name-artifacts.outputs.build-name}}ALL_CHI
        path: build/ALL_CHI
    - run: chmod u+x build/ALL_CHI/gem5.opt
    - uses: actions/download-artifact@v3
      with:
        name: ${{needs.name-artifacts.outputs.build-name}}ARM
        path: build/ARM
    - run: chmod u+x build/ARM/gem5.opt
    - uses: actions/download-artifact@v3
      with:
        name: ${{needs.name-artifacts.outputs.build-name}}ALL_MSI
        path: build/ALL_MSI
    - run: chmod u+x build/ALL_MSI/gem5.opt
    - uses: actions/download-artifact@v3
      with:
        name: ${{needs.name-artifacts.outputs.build-name}}ALL_MESI_Two_Level
        path: build/ALL_MESI_Two_Level
    - run: chmod u+x build/ALL_MESI_Two_Level/gem5.opt
    - uses: actions/download-artifact@v3
      with:
        name: ${{needs.name-artifacts.outputs.build-name}}NULL
        path: build/NULL
    - run: chmod u+x build/NULL/gem5.opt
    - uses: actions/download-artifact@v3
      with:
        name: ${{needs.name-artifacts.outputs.build-name}}NULL_MI_example
        path: build/NULL_MI_example
    - run: chmod u+x build/NULL_MI_example/gem5.opt
    - uses: actions/download-artifact@v3
      with:
        name: ${{needs.name-artifacts.outputs.build-name}}RISCV
        path: build/RISCV
    - run: chmod u+x build/RISCV/gem5.opt
    - uses: actions/download-artifact@v3
      with:
        name: ${{needs.name-artifacts.outputs.build-name}}VEGA_X86
        path: build/VEGA_X86
    - run: chmod u+x build/VEGA_X86/gem5.opt
    # run test
    - name: long ${{ matrix.test-type }} tests
      working-directory: ${{ github.workspace }}/tests
      run: ./main.py run gem5/${{ matrix.image }} --length=long --skip-build -vv -t $(nproc)
    - name: create zip of results
      if: success() || failure()
      run: |
        apt-get -y install zip
        zip -r output.zip tests/testing-results
    - name: upload zip
      if: success() || failure()
      uses: actions/upload-artifact@v3
      env:
        MY_STEP_VAR: ${{github.job}}_COMMIT.${{github.sha}}_RUN.${{github.run_id}}_ATTEMPT.${{github.run_attempt}}
      with:
        name: ${{ env.MY_STEP_VAR }}
        path: output.zip
        retention-days: 7
    - name: Clean runner
      if: success() || failure()
      run:
        rm -rf ./* || true
        rm -rf ./.??* || true
        rm -rf ~/.cache || true
    - run: echo "This job's status is ${{ job.status }}."

  # This runs the SST-gem5 integration compilation and tests it with
  # ext/sst/sst/example.py.
  sst-test:
    runs-on: [self-hosted, linux, x64, build]
    container: gcr.io/gem5-test/sst-env:latest
    timeout-minutes: 180

    steps:
    - uses: actions/checkout@v3
      with:
        # Scheduled workflows run on the default branch by default. We
        # therefore need to explicitly checkout the develop branch.
        ref: develop
    - name: Build RISCV/libgem5_opt.so with SST
      run: scons build/RISCV/libgem5_opt.so --without-tcmalloc --duplicate-sources --ignore-style -j $(nproc)
    - name: Compile ext/sst
      working-directory: ${{ github.workspace }}/ext/sst
      run: make -j $(nproc)
    - name: Run SST test
      working-directory: ${{ github.workspace }}/ext/sst
      run: sst --add-lib-path=./ sst/example.py

  # This runs the gem5 within SystemC ingration and runs a simple hello-world
  # simulation with it.
  systemc-test:
    runs-on: [self-hosted, linux, x64, build]
    container: gcr.io/gem5-test/systemc-env:latest
    timeout-minutes: 180

    steps:
    - uses: actions/checkout@v3
      with:
        # Scheduled workflows run on the default branch by default. We
        # therefore need to explicitly checkout the develop branch.
        ref: develop
    - name: Build ARM/gem5.opt
      run: scons build/ARM/gem5.opt --ignore-style --duplicate-sources -j$(nproc)
    - name: Build ARM/libgem5_opt.so
      run: scons build/ARM/libgem5_opt.so --with-cxx-config --without-python --without-tcmalloc USE_SYSTEMC=0 -j$(nproc) --duplicate-sources
    - name: Compile gem5 withing SystemC
      working-directory: ${{ github.workspace }}/util/systemc/gem5_within_systemc
      run: make
    - name: Run gem5 within SystemC test
      run: ./build/ARM/gem5.opt configs/deprecated/example/se.py -c tests/test-progs/hello/bin/arm/linux/hello
    - name: Continue gem5 within SystemC test
      run: LD_LIBRARY_PATH=build/ARM/:/opt/systemc/lib-linux64/ ./util/systemc/gem5_within_systemc/gem5.opt.sc m5out/config.ini

  # Runs the gem5 Nighyly GPU tests.
  gpu-tests:
    runs-on: [self-hosted, linux, x64, build]
    container: gcr.io/gem5-test/gcn-gpu:latest
    timeout-minutes: 720 # 12 hours

    steps:
    - uses: actions/checkout@v3
      with:
        # Scheduled workflows run on the default branch by default. We
        # therefore need to explicitly checkout the develop branch.
        ref: develop
    - name: Compile build/GCN3_X86/gem5.opt
      run: scons build/GCN3_X86/gem5.opt -j $(nproc)
    - name: Get Square test-prog from gem5-resources
      uses: wei/wget@v1
      with:
        args: -q http://dist.gem5.org/dist/develop/test-progs/square/square # Removed -N bc it wasn't available within actions, should be okay bc workspace is clean every time: https://github.com/coder/sshcode/issues/102
    - name: Run Square test with GCN3_X86/gem5.opt (SE mode)
      run: |
        mkdir -p tests/testing-results
        ./build/GCN3_X86/gem5.opt configs/example/apu_se.py --reg-alloc-policy=dynamic -n3 -c square
    - name: Get allSyncPrims-1kernel from gem5-resources
      uses: wei/wget@v1
      with:
        args: -q http://dist.gem5.org/dist/develop/test-progs/heterosync/gcn3/allSyncPrims-1kernel # Removed -N bc it wasn't available within actions, should be okay bc workspace is clean every time
    - name: Run allSyncPrims-1kernel sleepMutex test with GCN3_X86/gem5.opt (SE mode)
      run: ./build/GCN3_X86/gem5.opt configs/example/apu_se.py --reg-alloc-policy=dynamic -n3 -c allSyncPrims-1kernel --options="sleepMutex 10 16 4"
    - name: Run allSyncPrims-1kernel lfTreeBarrUsing test with GCN3_X86/gem5.opt (SE mode)
      run: ./build/GCN3_X86/gem5.opt configs/example/apu_se.py --reg-alloc-policy=dynamic -n3 -c allSyncPrims-1kernel --options="lfTreeBarrUniq 10 16 4"

# jobs:
#   build-gem5:
#     strategy:
#       matrix:
#         image: [ALL, ALL_CHI, ARM, ALL_MSI, ALL_MESI_Two_Level, NULL_MI_example, RISCV, VEGA_X86] #note: NULL doesn't work
#         include:
#           - command-line: -j $(nproc)
#           - image: ALL_CHI
#             command-line: --default=ALL PROTOCOL=CHI -j $(nproc)
#           - image: ALL_MSI
#             command-line: --default=ALL PROTOCOL=MSI -j $(nproc)
#           - image: ALL_MESI_Two_Level
#             command-line: --default=ALL PROTOCOL=MESI_Two_Level -j $(nproc)
#           - image: NULL_MI_example
#             command-line: --default=NULL PROTOCOL=MI_example -j $(nproc)
#     runs-on: [self-hosted, linux, x64, build]
#     container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
#     outputs:
#       build-name: ${{ steps.artifact-name.outputs.name }}
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           # Scheduled workflows run on the default branch by default. We
#           # therefore need to explicitly checkout the develop branch.
#           ref: develop
#       - id: artifact-name
#         run: echo "name=$(date +"%Y-%m-%d_%H.%M.%S")-" >> $GITHUB_OUTPUT
#       - name: Build gem5
#         run: |
#           scons build/${{ matrix.image }}/gem5.opt ${{ matrix.command-line }}
#       - uses: actions/upload-artifact@v3
#         with:
#           name: ${{ steps.artifact-name.outputs.name }}${{ matrix.image }}
#           path: build/${{ matrix.image }}/gem5.opt
#           retention-days: 5
#       - run: echo "This job's status is ${{ job.status }}."

#   # NULL build added separately since NULL is a keyword in yaml files
#   build-gem5-NULL:
#     runs-on: [self-hosted, linux, x64, build]
#     container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
#     outputs:
#       build-name: ${{ steps.artifact-name.outputs.name }}
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           # Scheduled workflows run on the default branch by default. We
#           # therefore need to explicitly checkout the develop branch.
#           ref: develop
#       - id: artifact-name
#         run: echo "name=$(date +"%Y-%m-%d_%H.%M.%S")-NULL" >> $GITHUB_OUTPUT
#       - name: Build gem5
#         run: |
#           scons build/NULL/gem5.opt -j $(nproc)
#       - uses: actions/upload-artifact@v3
#         with:
#           name: ${{ steps.artifact-name.outputs.name }}
#           path: build/NULL/gem5.opt
#           retention-days: 5
#       - run: echo "This job's status is ${{ job.status }}."

#   unittests-all-debug:
#     strategy:
#       matrix:
#         type: [fast, debug]
#     runs-on: [self-hosted, linux, x64, run]
#     container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
#     timeout-minutes: 60
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           # Scheduled workflows run on the default branch by default. We
#           # therefore need to explicitly checkout the develop branch.
#           ref: develop
#       - name: ALL/unittests.${{ matrix.type }} UnitTests
#         run: scons build/ALL/unittests.${{ matrix.type }} -j $(nproc)

# # start running all of the long tests
#   testlib-long-tests:
#     strategy:
#       matrix:
#         test-type: [arm-boot-tests, fs, gem5_library_example_tests, gpu, insttest_se, learning_gem5, m5threads_test_atomic, memory, multi_isa, replacement-policies, riscv-boot-tests, stdlib, x86-boot-tests]
#     runs-on: [self-hosted, linux, x64, run]
#     container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
#     needs: [build-gem5, build-gem5-NULL]
#     timeout-minutes: 1440 # 24 hours
#     steps:
#     - uses: actions/checkout@v3
#       with:
#         # Scheduled workflows run on the default branch by default. We
#         # therefore need to explicitly checkout the develop branch.
#         ref: develop
#     # download all artifacts for each test
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5.outputs.build-name}}ALL
#         path: build/ALL
#     - run: chmod u+x build/ALL/gem5.opt
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5-ALL_CHI.outputs.build-name}}ALL_CHI
#         path: build/ALL_CHI
#     - run: chmod u+x build/ALL_CHI/gem5.opt
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5-ARM.outputs.build-name}}ARM
#         path: build/ARM
#     - run: chmod u+x build/ARM/gem5.opt
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5-ARM.outputs.build-name}}ALL_MSI
#         path: build/ALL_MSI
#     - run: chmod u+x build/ALL_MSI/gem5.opt
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5-ARM.outputs.build-name}}ALL_MESI_Two_Level
#         path: build/ALL_MESI_Two_Level
#     - run: chmod u+x build/ALL_MESI_Two_Level/gem5.opt
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5-ARM.outputs.build-name}}NULL
#         path: build/NULL
#     - run: chmod u+x build/NULL/gem5.opt
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5-ARM.outputs.build-name}}NULL_MI_example
#         path: build/NULL_MI_example
#     - run: chmod u+x build/NULL_MI_example/gem5.opt
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5-ARM.outputs.build-name}}RISCV
#         path: build/RISCV
#     - run: chmod u+x build/RISCV/gem5.opt
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5-ARM.outputs.build-name}}VEGA_X86
#         path: build/VEGA_X86
#     - run: chmod u+x build/VEGA_X86/gem5.opt
#     # run test
#     - name: long ${{ matrix.test-type }} tests
#       working-directory: ${{ github.workspace }}/tests
#       run: ./main.py run gem5/${{ matrix.image }} --length=long --skip-build -vv -t $(nproc)
#     - name: create zip of results
#       if: success() || failure()
#       run: |
#         apt-get -y install zip
#         zip -r output.zip tests/testing-results
#     - name: upload zip
#       if: success() || failure()
#       uses: actions/upload-artifact@v3
#       env:
#         MY_STEP_VAR: ${{github.job}}_COMMIT.${{github.sha}}_RUN.${{github.run_id}}_ATTEMPT.${{github.run_attempt}}
#       with:
#         name: ${{ env.MY_STEP_VAR }}
#         path: output.zip
#         retention-days: 7
#     - name: Clean runner
#       if: success() || failure()
#       run:
#         rm -rf ./* || true
#         rm -rf ./.??* || true
#         rm -rf ~/.cache || true
#     - run: echo "This job's status is ${{ job.status }}."

  # ensures we have a change-id in every commit, needed for gerrit
  # check-for-change-id:
  #   # runs on github hosted runner
  #   runs-on: [self-hosted, linux, x64, build]
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     # - name: Check for Change-Id
  #     #   run: |
  #     #     for commit in $(git rev-list ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}); do
  #     #         git checkout $commit
  #     #         if !(git log -1 --pretty=format:"%B" | grep -q "Change-Id: ")
  #     #         then
  #     #           echo "One or more of the commits in this pull request is missing a Change-ID, which we require for any changes made to gem5. "\
  #     #           "To automatically insert one, run the following:\n f=`git rev-parse --git-dir`/hooks/commit-msg ; mkdir -p $(dirname $f) ; "\
  #     #           "curl -Lo $f https://gerrit-review.googlesource.com/tools/hooks/commit-msg ; chmod +x $f\n Then amend the commit with git commit --amend --no-edit, and update your pull request."
  #     #           exit 1
  #     #         fi
  #     #     done
  #     - name: Download stuff
  #       run: |
  #         wget https://dist.gem5.org/dist/develop/images/x86/ubuntu-18-04/x86-ubuntu.img.gz --no-check-certificate
  #     - name: Delete stuff
  #       run: |
  #         ls -la ./
  #         # ls -la /actions_runner/_work/_temp/_github_home/.cache
  #         rm -rf ./* || true
  #         rm -rf ./.??* || true
  #         rm -rf ~/.cache || true
  #         ls -la ./
  #         # for commit in $(git rev-list ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}); do
  #         #     git checkout $commit
  #         #     if !(git log -1 --pretty=format:"%s" | grep -q "Change-Id: ")
  #         #     then
  #         #       echo "One or more of the commits in this pull request is missing a Change-ID, which we require for any changes made to gem5. "\
  #         #       "To automatically insert one, run the following:\n f=`git rev-parse --git-dir`/hooks/commit-msg ; mkdir -p $(dirname $f) ; "\
  #         #       "curl -Lo $f https://gerrit-review.googlesource.com/tools/hooks/commit-msg ; chmod +x $f\n Then amend the commit with git commit --amend --no-edit, and update your pull request."
  #         #       exit 1
  #         #     fi
  #         # done


# name: 'Github Workflow History'

# 'on':
#   push:
#     inputs:
#       failJob:
#         description: Fail the job?
#         type: boolean
#         required: true
#         default: false

# jobs:
#   exampleJob:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Pass or fail job
#         run: exit 1
#         if: github.event.inputs.failJob == 'true'

#       - name: Check last job status
#         id: lastJobStatus
#         if: always()
#         run: |
#           LAST_JOB_STATUS=$(gh run list --workflow daily-tests.yaml | grep -oh "completed.*" | head -1 | awk '{print $2}')
#           THIS_JOB_STATUS="${{ job.status }}"
#           if [ "$LAST_JOB_STATUS" != "$THIS_JOB_STATUS" ]; then
#             echo "status changed from $LAST_JOB_STATUS to $THIS_JOB_STATUS"
#           else
#             echo "status is still $THIS_JOB_STATUS"
#           fi
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       - name: Showcase output variable
#         if: always() && steps.lastJobStatus.outputs.changedState == 'true'
#         run: echo "CHANGED STATE!!!"














# name: artifact naming
# run-name: testing change id
# # name: Github Artifacting Tests
# # run-name: Testing artifact usage
# #  https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
# on:
#   # push:
#   workflow_dispatch:
#   pull_request:
#     types: [opened, edited, synchronize, ready_for_review]
#   # pull_request:
#   #   types: [opened, edited, synchronize]

# # This file is an example of using artifact in different runs, for us to utilize in
# # separating jobs amongst different runner
# jobs:
#   check-for-change-id:
#     runs-on: ubuntu-latest
#     # container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
#     steps:
#   #     - uses: actions/checkout@v3
#   # #       with:
#   # # #         # Scheduled workflows run on the default branch by default. We
#   # # #         # therefore need to explicitly checkout the develop branch.
#   # #         ref: ghjghjfhj
#   #     - name: Test
#   #       env:
#   #         GH_TOKEN: ${{ github.token }}
#   #       run: |
#   #         gh pr view --json commits
#       - name: Test
#         run: |
#           commits=${{join(github.event.commits.*.message, ', ') }}
#           echo $commits
#       - uses: actions/github-script@v6
#         env:
#           token: "Change-Id"
#           pattern: ".*"
#         with:
#           script: |
#             const commits = ${{ toJSON( github.event.pull_request.commits) }}
#             for (const commit of commits) {
#               const id = "Change-Id: "
#               const message = commit.message;
#               if (!message.includes(id)) {
#                 core.setFailed('One or more of the commits in this pull request is missing a Change-ID, which we require for any changes made to gem5. ' +
#                 'To automatically insert one, run the following:\n f=`git rev-parse --git-dir`/hooks/commit-msg ; mkdir -p $(dirname $f) ; ' +
#                 'curl -Lo $f https://gerrit-review.googlesource.com/tools/hooks/commit-msg ; chmod +x $f\n Then amend the commit with git commit --amend --no-edit, and update your pull request.')
#               }
#             }

  # build-gem5:
  #   runs-on: [self-hosted, linux, x64, build]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   outputs:
  #     build-name: ${{ steps.artifact-name.outputs.name }}
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         # Scheduled workflows run on the default branch by default. We
  #         # therefore need to explicitly checkout the develop branch.
  #         ref: develop
  #     - id: artifact-name
  #       run: echo "name=$(date +"%Y-%m-%d_%H.%M.%S")-ALL" >> $GITHUB_OUTPUT
  #     - name: Build gem5
  #       run: |
  #         scons build/ALL/gem5.opt -j$(nproc)
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ steps.artifact-name.outputs.name }}
  #         path: build/ALL/gem5.opt
  #         retention-days: 5
  #     - run: echo "This job's status is ${{ job.status }}."

  # build-gem5-ALL_MESI_Two_Level:
  #   runs-on: [self-hosted, linux, x64, build,]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   outputs:
  #     build-name: ${{ steps.artifact-name.outputs.name }}
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         # Scheduled workflows run on the default branch by default. We
  #         # therefore need to explicitly checkout the develop branch.
  #         ref: develop
  #     - id: artifact-name
  #       run: echo "name=$(date +"%Y-%m-%d_%H.%M.%S")-ALL_MESI_Two_Level" >> $GITHUB_OUTPUT
  #     - name: Build gem5
  #       run: |
  #         scons build/ALL_MESI_Two_Level/gem5.opt --default=ALL PROTOCOL=MESI_Two_Level -j $(nproc)
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ steps.artifact-name.outputs.name }}
  #         path: build/ALL_MESI_Two_Level/gem5.opt
  #         retention-days: 5
  #     - run: echo "This job's status is ${{ job.status }}."

  # testlib-long-gem5_library_example_tests:
  #   runs-on: [self-hosted, linux, x64, build]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   needs: [build-gem5, build-gem5-ALL_MESI_Two_Level]
  #   timeout-minutes: 1440 # 24 hours
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       # Scheduled workflows run on the default branch by default. We
  #       # therefore need to explicitly checkout the develop branch.
  #       ref: develop
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.build-gem5.outputs.build-name}}
  #       path: build/ALL
  #   - run: chmod u+x build/ALL/gem5.opt
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.build-gem5-ALL_MESI_Two_Level.outputs.build-name}}
  #       path: build/ALL_MESI_Two_Level
  #   - run: chmod u+x build/ALL_MESI_Two_Level/gem5.opt
  #   - name: long gem5_library_example_tests
  #     working-directory: ${{ github.workspace }}/tests
  #     run: ./main.py run gem5/gem5_library_example_tests --length=long --skip-build -vv -t $(nproc)
  #   - name: create zip of results
  #     if: success() || failure()
  #     run: |
  #       apt-get -y install zip
  #       zip -r output.zip tests/testing-results
  #   - name: upload zip
  #     if: success() || failure()
  #     uses: actions/upload-artifact@v3
  #     env:
  #       MY_STEP_VAR: ${{github.job}}_COMMIT.${{github.sha}}_RUN.${{github.run_id}}_ATTEMPT.${{github.run_attempt}}
  #     with:
  #       name: ${{ env.MY_STEP_VAR }}
  #       path: output.zip
  #       retention-days: 7
  #   - run: echo "This job's status is ${{ job.status }}."
