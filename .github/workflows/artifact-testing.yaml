name: CI Tests

on:
  push:
  workflow_dispatch:
  # pull_request:
  #   types: [opened, edited, synchronize, ready_for_review]

env:
  RUN_SCRIPT=configs/example/gem5_library/x86-ubuntu-run-to-tick.py --ticks 1000000
  BASELINE_STATS=stats-baseline.txt
  COMPARE_STATS=stats-to-compare.txt

jobs:
  stats-output-baseline:
    runs-on: [self-hosted, linux, x64, build]
    timeout-minutes: 120     # 2 hours
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    steps:
        - uses: actions/checkout@v3
          with:
            # Scheduled workflows run on the default branch by default. We
            # therefore need to explicitly checkout the develop branch.
            ref: develop

        - name: Compile build/ALL/gem5.opt with ubuntu-22.04_all-dependencies
          run: /usr/bin/env python3 /usr/bin/scons --ignore-style build/ALL/gem5.opt -j$(nproc)

        - name: Run basic gem5 script
          run: ./build/ALL/gem5.opt --stats-file="${BASELINE_STATS}" ${RUN_SCRIPT}

        - name: Upload stats JSON
          uses: actions/upload-artifact@v2
          with:
            name: all-stats-json
            path: m5out/${{ env.BASELINE_STATS }}

  # replication of compiler-tests.sh
  all-compilers:
    needs: stats-output-baseline
    strategy:
      fail-fast: false
      matrix:
        image: [gcc-version-12, gcc-version-11, gcc-version-10, gcc-version-9, gcc-version-8, clang-version-14, clang-version-13, clang-version-12, clang-version-11, clang-version-10, clang-version-9, clang-version-8, clang-version-7, ubuntu-20.04_all-dependencies, ubuntu-22.04_all-dependencies, ubuntu-22.04_min-dependencies]
        opts: [.opt, .fast]
    runs-on: [self-hosted, linux, x64, build]
    timeout-minutes: 2880     # 48 hours
    container: gcr.io/gem5-test/${{ matrix.image }}:latest
    steps:
    - uses: actions/checkout@v3
      with:
        # Scheduled workflows run on the default branch by default. We
        # therefore need to explicitly checkout the develop branch.
        ref: develop
    - name: Compile build/ALL/gem5${{ matrix.opts }} with ${{ matrix.image }}
      run: /usr/bin/env python3 /usr/bin/scons --ignore-style build/ALL/gem5${{ matrix.opts }} -j$(nproc)
      timeout-minutes: 600  # 10 hours

    # Here we check the binary the compiler produces produces the same stats.
    - name: Run basic gem5 script
      run: ./build/ALL/gem5${{ matrix.opts }} --stats-file="${COMPARE_STATS}" ${RUN_SCRIPT}

    - name: Get the baseline stats JSON
      uses: actions/download-artifact@v2
      with:
        name: all-stats-json

    - name: Install jq
      run: apt install jq

    - name: Compare the stats JSONs
      run: |
        diff <(grep -v "^host" "m5out/${COMPARE_STATS}" ) <(grep -v "^host" "${BASELINE_STATS}")
        if [ $? -eq 0 ]; then
          echo "Stats files are the same"
          exit 0
        else
          echo "Stats files are different"
          exit 1
        fi

  # Tests the two latest gcc and clang supported compilers against all gem5 compilations.
  latest-compilers-all-gem5-builds:
    strategy:
      fail-fast: false
      matrix:
        gem5-compilation: [ARM, ARM_MESI_Three_Level, ARM_MESI_Three_Level_HTM, ARM_MOESI_hammer, Garnet_standalone, GCN3_X86, MIPS, 'NULL', NULL_MESI_Two_Level, NULL_MOESI_CMP_directory, NULL_MOESI_CMP_token, NULL_MOESI_hammer, POWER, RISCV, SPARC, X86, X86_MI_example, X86_MOESI_AMD_Base, VEGA_X86, GCN3_X86]
        image: [gcc-version-12, clang-version-14]
        opts: [.opt]
    runs-on: [self-hosted, linux, x64, build]
    timeout-minutes: 2880     # 48 hours
    container: gcr.io/gem5-test/${{ matrix.image }}:latest
    steps:
    - uses: actions/checkout@v3
      with:
        # Scheduled workflows run on the default branch by default. We
        # therefore need to explicitly checkout the develop branch.
        ref: develop
    - name: Compile build/${{ matrix.gem5-compilation }}/gem5${{ matrix.opts }} with ${{ matrix.image }}
      run: /usr/bin/env python3 /usr/bin/scons --ignore-style build/${{ matrix.gem5-compilation }}/gem5${{ matrix.opts }} -j$(nproc)
      timeout-minutes: 600 # 10 hours

# jobs:
  # commits-since-last-run:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       # Scheduled workflows run on the default branch by default. We
  #       # therefore need to explicitly checkout the develop branch.
  #       ref: develop

  #   - name: 'Download artifact'
  #     uses: actions/github-script@v6
  #     continue-on-error: true
      # with:
      #   script: |
      #       let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
      #          owner: context.repo.owner,
      #          repo: context.repo.repo,
      #          run_id: context.payload.workflow_run.id,
      #       });
      #       let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
      #         return artifact.name == "last-scheduled-daily-run-commit"
      #       })[0];
      #       let download = await github.rest.actions.downloadArtifact({
    #            owner: context.repo.owner,
    #            repo: context.repo.repo,
    #            artifact_id: matchArtifact.id,
    #            archive_format: 'zip',
    #         });
    #         let fs = require('fs');
    #         fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/last-scheduled-daily-run-commit.zip`, Buffer.from(download.data));

    # - name: get-last-daily-test-commit
    #   run: |
    #     echo "## Commits since last scheduled daily run" >> $GITHUB_STEP_SUMMARY
    #     if [ -f last-scheduled-daily-run-commit ]; then
    #       prev_commit=$(cat last-scheduled-daily-run-commit)
    #       git log --oneline --ancestry-path  --pretty='* [%h](${{ github.server_url }}/${{ github.repository }}/commit/%h) %s ' ${prev_commit}..HEAD >> $GITHUB_STEP_SUMMARY
    #     else
    #       echo "No last-scheduled-daily-run-commit artifact found. This is the first scheduled daily run." >> $GITHUB_STEP_SUMMARY
    #     fi
    # - name: Record this run's commit as last scheduled daily run commit
    #   run: echo "$(git rev-parse HEAD)" >last-scheduled-daily-run-commit

    # - name: Upload last scheduled daily run commit artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: last-scheduled-daily-run-commit
    #     path: last-scheduled-daily-run-commit

    # - name: Cleanup
    #   run: rm last-scheduled-daily-run-commit


          # mkdir -p tests/testing-results
        # ./build/GCN3_X86/gem5.opt configs/example/apu_se.py --reg-alloc-policy=dynamic -n3 -c square
    # - name: Get allSyncPrims-1kernel from gem5-resources
    #   uses: wei/wget@v1
    #   with:
    #     args: -q http://dist.gem5.org/dist/develop/test-progs/heterosync/gcn3/allSyncPrims-1kernel # Removed -N bc it wasn't available within actions, should be okay bc workspace is clean every time
    # - name: Run allSyncPrims-1kernel sleepMutex test with GCN3_X86/gem5.opt (SE mode)
    #   run: ./build/GCN3_X86/gem5.opt configs/example/apu_se.py --reg-alloc-policy=dynamic -n3 -c allSyncPrims-1kernel --options="sleepMutex 10 16 4"
    # - name: Run allSyncPrims-1kernel lfTreeBarrUsing test with GCN3_X86/gem5.opt (SE mode)
    #   run: ./build/GCN3_X86/gem5.opt configs/example/apu_se.py --reg-alloc-policy=dynamic -n3 -c allSyncPrims-1kernel --options="lfTreeBarrUniq 10 16 4"

  # pannotia-tests:
  #   # runs-on: [self-hosted, linux, x64, build]
  #   runs-on: ubuntu-22.04
  #   # needs: build-gem5
  #   timeout-minutes: 4320 # 3 days
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       test-name: [BC, "Color Max", "Color Max Min", FW, MIS, "PageRank Default", "PageRank (SPMV)", "SSSP (CSR)", "SSSP (ELL)"]
  #       include:
  #         - working-directory: sleep 30; exit 0
  #         - test-name: BC
  #           working-directory: exit 1
  #         - test-name: "Color Max"
  #           working-directory: exit 1

  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         # Scheduled workflows run on the default branch by default. We
  #         # therefore need to explicitly checkout the develop branch.
  #         ref: develop
  #     # - name: Build gem5.opt
  #     #   working-directory: ${{ github.workspace }}
  #     #   run: scons build/GCN3_X86/gem5.opt -j4 --ignore-style --duplicate-sources || rm -rf build && scons build/GCN3_X86/gem5.opt -j4 --ignore-style --duplicate-sources
  #     # - uses: actions/download-artifact@v3
  #       # with:
  #       #   name: ${{needs.build-gem5.outputs.build-name}}
  #       #   path: build/GCN3_X86
  #     # - run: chmod u+x build/GCN3_X86/gem5.opt
  #     # - name: checkout gem5 resources
  #     #   working-directory: ${{ github.workspace }}
  #     #   run: |
  #     #     git clone https://gem5.googlesource.com/public/gem5-resources
  #     #     cd gem5-resources
  #     #     git checkout develop
  #     - name: Compile m5ops and x86
  #       # working-directory: ${{ github.workspace }}/util/m5
  #       run: ${{matrix.working-directory}}
  # build-gem5:
  #   runs-on: [self-hosted, linux, x64, build]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   outputs:
  #     build-name: ${{ steps.artifact-name.outputs.name }}
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         # Scheduled workflows run on the default branch by default. We
  #         # therefore need to explicitly checkout the develop branch.
  #         ref: develop
  #     - id: artifact-name
  #       run: echo "name=$(date +"%Y-%m-%d_%H.%M.%S")-ALL" >> $GITHUB_OUTPUT
  #     - name: Build gem5
  #       run: |
  #         scons build/ALL/gem5.opt -j $(nproc)
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ steps.artifact-name.outputs.name }}
  #         path: build/ALL/gem5.opt
  #         retention-days: 5
  #     - run: echo "This job's status is ${{ job.status }}."

  # testlib-long-insttest_se:
  #   runs-on: [self-hosted, linux, x64, run]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   needs: build-gem5
  #   timeout-minutes: 1440 # 24 hours
  #   steps:
  #   - name: Clean runner
  #     run:
  #       rm -rf ./* || true
  #       rm -rf ./.??* || true
  #       rm -rf ~/.cache || true
  #   - uses: actions/checkout@v3
  #     with:
  #       # Scheduled workflows run on the default branch by default. We
  #       # therefore need to explicitly checkout the develop branch.
  #       ref: develop
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.build-gem5.outputs.build-name}}
  #       path: build/ALL
  #   - run: chmod u+x build/ALL/gem5.opt
  #   - name: long insttest_se
  #     working-directory: ${{ github.workspace }}/tests
  #     run: ./main.py run gem5/insttest_se --length=long --skip-build -vv -t $(nproc)
  #   - name: create zip of results
  #     if: success() || failure()
  #     run: |
  #       apt-get -y install zip
  #       zip -r output.zip tests/testing-results
  #   - name: upload zip
  #     if: success() || failure()
  #     uses: actions/upload-artifact@v3
  #     env:
  #       MY_STEP_VAR: ${{github.job}}_COMMIT.${{github.sha}}_RUN.${{github.run_id}}_ATTEMPT.${{github.run_attempt}}
  #     with:
  #       name: ${{ env.MY_STEP_VAR }}
  #       path: output.zip
  #       retention-days: 7
  #   - run: echo "This job's status is ${{ job.status }}."
  # build-gem5:
  #   strategy:
  #     matrix:
  #       image: [ALL, ALL_CHI, ARM, ALL_MSI, ALL_MESI_Two_Level, "NULL", NULL_MI_example, RISCV, VEGA_X86]
  #       include:
  #         - command-line: -j $(nproc)
  #         - image: ALL_CHI
  #           command-line: --default=ALL PROTOCOL=CHI -j $(nproc)
  #         - image: ALL_MSI
  #           command-line: --default=ALL PROTOCOL=MSI -j $(nproc)
  #         - image: ALL_MESI_Two_Level
  #           command-line: --default=ALL PROTOCOL=MESI_Two_Level -j $(nproc)
  #         - image: NULL_MI_example
  #           command-line: --default=NULL PROTOCOL=MI_example -j $(nproc)
  #   runs-on: [self-hosted, linux, x64, build]
  #   needs: name-artifacts
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         # Scheduled workflows run on the default branch by default. We
  #         # therefore need to explicitly checkout the develop branch.
  #         ref: develop
  #     - name: Build gem5
  #       run: scons build/${{ matrix.image }}/gem5.opt ${{ matrix.command-line }}
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ needs.name-artifacts.outputs.build-name }}${{ matrix.image }}
  #         path: build/${{ matrix.image }}/gem5.opt
  #         retention-days: 5
  #     - run: echo "This job's status is ${{ job.status }}."

  # unittests-all-debug:
  #   strategy:
  #     matrix:
  #       type: [fast, debug]
  #   runs-on: [self-hosted, linux, x64, run]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   timeout-minutes: 60
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         # Scheduled workflows run on the default branch by default. We
  #         # therefore need to explicitly checkout the develop branch.
  #         ref: develop
  #     - name: ALL/unittests.${{ matrix.type }} UnitTests
  #       run: scons build/ALL/unittests.${{ matrix.type }} -j $(nproc)

  # # start running all of the long tests
  # testlib-long-tests:
  #   strategy:
  #     matrix:
  #       test-type: [arm-boot-tests, fs, gem5_library_example_tests, gpu, insttest_se, learning_gem5, m5threads_test_atomic, memory, multi_isa, replacement-policies, riscv-boot-tests, stdlib, x86-boot-tests]
  #   runs-on: [self-hosted, linux, x64, run]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   needs: [name-artifacts, build-gem5]
  #   timeout-minutes: 1440 # 24 hours
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       # Scheduled workflows run on the default branch by default. We
  #       # therefore need to explicitly checkout the develop branch.
  #       ref: develop
  #   # download all artifacts for each test
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.name-artifacts.outputs.build-name}}ALL
  #       path: build/ALL
  #   - run: chmod u+x build/ALL/gem5.opt
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.name-artifacts.outputs.build-name}}ALL_CHI
  #       path: build/ALL_CHI
  #   - run: chmod u+x build/ALL_CHI/gem5.opt
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.name-artifacts.outputs.build-name}}ARM
  #       path: build/ARM
  #   - run: chmod u+x build/ARM/gem5.opt
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.name-artifacts.outputs.build-name}}ALL_MSI
  #       path: build/ALL_MSI
  #   - run: chmod u+x build/ALL_MSI/gem5.opt
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.name-artifacts.outputs.build-name}}ALL_MESI_Two_Level
  #       path: build/ALL_MESI_Two_Level
  #   - run: chmod u+x build/ALL_MESI_Two_Level/gem5.opt
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.name-artifacts.outputs.build-name}}NULL
  #       path: build/NULL
  #   - run: chmod u+x build/NULL/gem5.opt
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.name-artifacts.outputs.build-name}}NULL_MI_example
  #       path: build/NULL_MI_example
  #   - run: chmod u+x build/NULL_MI_example/gem5.opt
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.name-artifacts.outputs.build-name}}RISCV
  #       path: build/RISCV
  #   - run: chmod u+x build/RISCV/gem5.opt
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.name-artifacts.outputs.build-name}}VEGA_X86
  #       path: build/VEGA_X86
  #   - run: chmod u+x build/VEGA_X86/gem5.opt
  #   # run test
  #   - name: long ${{ matrix.test-type }} tests
  #     working-directory: ${{ github.workspace }}/tests
  #     run: ./main.py run gem5/${{ matrix.image }} --length=long --skip-build -vv -t $(nproc)
  #   - name: create zip of results
  #     if: success() || failure()
  #     run: |
  #       apt-get -y install zip
  #       zip -r output.zip tests/testing-results
  #   - name: upload zip
  #     if: success() || failure()
  #     uses: actions/upload-artifact@v3
  #     env:
  #       MY_STEP_VAR: ${{github.job}}_COMMIT.${{github.sha}}_RUN.${{github.run_id}}_ATTEMPT.${{github.run_attempt}}
  #     with:
  #       name: ${{ env.MY_STEP_VAR }}
  #       path: output.zip
  #       retention-days: 7
  #   - name: Clean runner
  #     if: success() || failure()
  #     run:
  #       rm -rf ./* || true
  #       rm -rf ./.??* || true
  #       rm -rf ~/.cache || true
  #   - run: echo "This job's status is ${{ job.status }}."

  # # split library example tests into runs based on Suite UID
  # # so that they don't hog the runners for too long
  # testlib-long-gem5_library_example_tests:
  #   runs-on: [self-hosted, linux, x64, run]
  #   strategy:
  #     matrix:
  #       test-type: [gem5-library-example-x86-ubuntu-run-ALL-x86_64-opt, gem5-library-example-riscv-ubuntu-run-ALL-x86_64-opt, lupv-example-ALL-x86_64-opt, gem5-library-example-arm-ubuntu-run-test-ALL-x86_64-opt, gem5-library-example-riscvmatched-hello-ALL-x86_64-opt]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   needs: build-gem5
  #   timeout-minutes: 1440 # 24 hours
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       # Scheduled workflows run on the default branch by default. We
  #       # therefore need to explicitly checkout the develop branch.
  #       ref: develop
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.name-artifacts.outputs.build-name}}ALL
  #       path: build/ALL
  #   - run: chmod u+x build/ALL/gem5.opt
  #   - name: long ${{ matrix.test-type }} gem5_library_example_tests
  #     working-directory: ${{ github.workspace }}/tests
  #     run: ./main.py run --uid SuiteUID:tests/gem5/gem5_library_example_tests/test_gem5_library_examples.py:test-${{ matrix.test-type }} --length=long --skip-build -vv
  #   - name: create zip of results
  #     if: success() || failure()
  #     run: |
  #       apt-get -y install zip
  #       zip -r output.zip tests/testing-results
  #   - name: upload zip
  #     if: success() || failure()
  #     uses: actions/upload-artifact@v3
  #     env:
  #       MY_STEP_VAR: ${{github.job}}_COMMIT.${{github.sha}}_RUN.${{github.run_id}}_ATTEMPT.${{github.run_attempt}}
  #     with:
  #       name: ${{ env.MY_STEP_VAR }}
  #       path: output.zip
  #       retention-days: 7
  #   - name: Clean runner
  #     if: success() || failure()
  #     run:
  #       rm -rf ./* || true
  #       rm -rf ./.??* || true
  #       rm -rf ~/.cache || true
  #   - run: echo "This job's status is ${{ job.status }}."

# jobs:
#   name-artifacts:
#     runs-on: ubuntu-latest
#     outputs:
#       build-name: ${{ steps.artifact-name.outputs.name }}
#     steps:
#     - uses: actions/checkout@v2
#     - id: artifact-name
#       run: echo "name=$(date +"%Y-%m-%d_%H.%M.%S-")" >> $GITHUB_OUTPUT

#   build-gem5:
#     strategy:
#       matrix:
#         image: [ALL]
#         # image: [ALL, ALL_CHI, ARM, ALL_MSI, ALL_MESI_Two_Level, NULL_MI_example, RISCV, VEGA_X86] #note: NULL doesn't work
#         include:
#           - command-line: -j $(nproc)
#           # - image: ALL_CHI
#           #   command-line: --default=ALL PROTOCOL=CHI -j $(nproc)
#           # - image: ALL_MSI
#           #   command-line: --default=ALL PROTOCOL=MSI -j $(nproc)
#           # - image: ALL_MESI_Two_Level
#           #   command-line: --default=ALL PROTOCOL=MESI_Two_Level -j $(nproc)
#           # - image: NULL_MI_example
#           #   command-line: --default=NULL PROTOCOL=MI_example -j $(nproc)
#     runs-on: [self-hosted, linux, x64, build]
#     needs: name-artifacts
#     container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           # Scheduled workflows run on the default branch by default. We
#           # therefore need to explicitly checkout the develop branch.
#           ref: develop
#       - name: Build gem5
#         run: |
#           scons build/${{ matrix.image }}/gem5.opt ${{ matrix.command-line }}
#       - uses: actions/upload-artifact@v3
#         with:
#           name: ${{ needs.name-artifacts.outputs.build-name }}${{ matrix.image }}
#           path: build/${{ matrix.image }}/gem5.opt
#           retention-days: 5
#       - run: echo "This job's status is ${{ job.status }}."

#   # NULL build added separately since NULL is a keyword in yaml files
#   # build-gem5-NULL:
#   #   runs-on: [self-hosted, linux, x64, build]
#   #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
#   #   needs: name-artifacts
#   #   steps:
#   #     - uses: actions/checkout@v3
#   #       with:
#   #         # Scheduled workflows run on the default branch by default. We
#   #         # therefore need to explicitly checkout the develop branch.
#   #         ref: develop
#   #     - name: Build gem5
#   #       run: |
#   #         scons build/NULL/gem5.opt -j $(nproc)
#   #     - uses: actions/upload-artifact@v3
#   #       with:
#   #         name: ${{ needs.name-artifacts.outputs.build-name }}NULL
#   #         path: build/NULL/gem5.opt
#   #         retention-days: 5
#   #     - run: echo "This job's status is ${{ job.status }}."

#   # unittests-all-debug:
#   #   strategy:
#   #     matrix:
#   #       type: [fast, debug]
#   #   runs-on: [self-hosted, linux, x64, run]
#   #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
#   #   timeout-minutes: 60
#   #   steps:
#   #     - uses: actions/checkout@v3
#   #       with:
#   #         # Scheduled workflows run on the default branch by default. We
#   #         # therefore need to explicitly checkout the develop branch.
#   #         ref: develop
#   #     - name: ALL/unittests.${{ matrix.type }} UnitTests
#   #       run: scons build/ALL/unittests.${{ matrix.type }} -j $(nproc)

# # # start running all of the long tests
# #   testlib-long-tests:
# #     strategy:
# #       matrix:
# #         test-type: [arm-boot-tests, fs, gem5_library_example_tests, gpu, insttest_se, learning_gem5, m5threads_test_atomic, memory, multi_isa, replacement-policies, riscv-boot-tests, stdlib, x86-boot-tests]
# #     runs-on: [self-hosted, linux, x64, run]
# #     container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
# #     needs: [build-gem5, build-gem5-NULL, name-artifacts]
# #     timeout-minutes: 1440 # 24 hours
# #     steps:
# #     - uses: actions/checkout@v3
# #       with:
# #         # Scheduled workflows run on the default branch by default. We
# #         # therefore need to explicitly checkout the develop branch.
# #         ref: develop
# #     # download all artifacts for each test
# #     - run: echo ${{needs.name-artifacts.outputs.build-name}}ALL
# #     - uses: actions/download-artifact@v3
# #       with:
# #         name: ${{needs.name-artifacts.outputs.build-name}}ALL
# #         path: build/ALL
# #     - run: chmod u+x build/ALL/gem5.opt
# #     - uses: actions/download-artifact@v3
# #       with:
# #         name: ${{needs.name-artifacts.outputs.build-name}}ALL_CHI
# #         path: build/ALL_CHI
# #     - run: chmod u+x build/ALL_CHI/gem5.opt
# #     - uses: actions/download-artifact@v3
# #       with:
# #         name: ${{needs.name-artifacts.outputs.build-name}}ARM
# #         path: build/ARM
# #     - run: chmod u+x build/ARM/gem5.opt
# #     - uses: actions/download-artifact@v3
# #       with:
# #         name: ${{needs.name-artifacts.outputs.build-name}}ALL_MSI
# #         path: build/ALL_MSI
# #     - run: chmod u+x build/ALL_MSI/gem5.opt
# #     - uses: actions/download-artifact@v3
# #       with:
# #         name: ${{needs.name-artifacts.outputs.build-name}}ALL_MESI_Two_Level
# #         path: build/ALL_MESI_Two_Level
# #     - run: chmod u+x build/ALL_MESI_Two_Level/gem5.opt
# #     - uses: actions/download-artifact@v3
# #       with:
# #         name: ${{needs.name-artifacts.outputs.build-name}}NULL
# #         path: build/NULL
# #     - run: chmod u+x build/NULL/gem5.opt
# #     - uses: actions/download-artifact@v3
# #       with:
# #         name: ${{needs.name-artifacts.outputs.build-name}}NULL_MI_example
# #         path: build/NULL_MI_example
# #     - run: chmod u+x build/NULL_MI_example/gem5.opt
# #     - uses: actions/download-artifact@v3
# #       with:
# #         name: ${{needs.name-artifacts.outputs.build-name}}RISCV
# #         path: build/RISCV
# #     - run: chmod u+x build/RISCV/gem5.opt
# #     - uses: actions/download-artifact@v3
# #       with:
# #         name: ${{needs.name-artifacts.outputs.build-name}}VEGA_X86
# #         path: build/VEGA_X86
# #     - run: chmod u+x build/VEGA_X86/gem5.opt
# #     # run test
# #     - name: long ${{ matrix.test-type }} tests
# #       working-directory: ${{ github.workspace }}/tests
# #       run: ./main.py run gem5/${{ matrix.image }} --length=long --skip-build -vv -t $(nproc)
# #     - name: create zip of results
# #       if: success() || failure()
# #       run: |
# #         apt-get -y install zip
# #         zip -r output.zip tests/testing-results
# #     - name: upload zip
# #       if: success() || failure()
# #       uses: actions/upload-artifact@v3
# #       env:
# #         MY_STEP_VAR: ${{github.job}}_COMMIT.${{github.sha}}_RUN.${{github.run_id}}_ATTEMPT.${{github.run_attempt}}
# #       with:
# #         name: ${{ env.MY_STEP_VAR }}
# #         path: output.zip
# #         retention-days: 7
# #     - name: Clean runner
# #       if: success() || failure()
# #       run:
# #         rm -rf ./* || true
# #         rm -rf ./.??* || true
# #         rm -rf ~/.cache || true
# #     - run: echo "This job's status is ${{ job.status }}."

#   # split library example tests into runs based on Suite UID
#   # so that they don't hog the runners for too long
#   testlib-long-gem5_library_example_tests:
#     runs-on: [self-hosted, linux, x64, run]
#     strategy:
#       matrix:
#         test-type: [gem5-library-example-x86-ubuntu-run-ALL-x86_64-opt, gem5-library-example-riscv-ubuntu-run-ALL-x86_64-opt, lupv-example-ALL-x86_64-opt, gem5-library-example-arm-ubuntu-run-test-ALL-x86_64-opt, gem5-library-example-riscvmatched-hello-ALL-x86_64-opt]
#     container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
#     needs: [build-gem5, name-artifacts]
#     timeout-minutes: 1440 # 24 hours
#     steps:
#     - uses: actions/checkout@v3
#       with:
#         # Scheduled workflows run on the default branch by default. We
#         # therefore need to explicitly checkout the develop branch.
#         ref: develop
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.name-artifacts.outputs.build-name}}ALL
#         path: build/ALL
#     - run: chmod u+x build/ALL/gem5.opt
#     # - uses: actions/download-artifact@v3
#     #   with:
#     #     name: ${{needs.name-artifacts.outputs.build-name}}ALL_MESI_Two_Level
#     #     path: build/ALL_MESI_Two_Level
#     # - run: chmod u+x build/ALL_MESI_Two_Level/gem5.opt
#     - name: long ${{ matrix.test-type }} gem5_library_example_tests
#       working-directory: ${{ github.workspace }}/tests
#       run: ./main.py run --uid SuiteUID:tests/gem5/gem5_library_example_tests/test_gem5_library_examples.py:test-${{ matrix.test-type }} --length=long --skip-build -vv
#     - name: create zip of results
#       if: success() || failure()
#       run: |
#         apt-get -y install zip
#         zip -r output.zip tests/testing-results
#     - name: upload zip
#       if: success() || failure()
#       uses: actions/upload-artifact@v3
#       env:
#         MY_STEP_VAR: ${{github.job}}_COMMIT.${{github.sha}}_RUN.${{github.run_id}}_ATTEMPT.${{github.run_attempt}}
#       with:
#         name: ${{ env.MY_STEP_VAR }}
#         path: output.zip
#         retention-days: 7
#     - name: Clean runner
#       if: success() || failure()
#       run:
#         rm -rf ./* || true
#         rm -rf ./.??* || true
#         rm -rf ~/.cache || true
#     - run: echo "This job's status is ${{ job.status }}."
# # jobs:
#   build-gem5:
#     strategy:
#       matrix:
#         image: [ALL, ALL_CHI, ARM, ALL_MSI, ALL_MESI_Two_Level, NULL_MI_example, RISCV, VEGA_X86] #note: NULL doesn't work
#         include:
#           - command-line: -j $(nproc)
#           - image: ALL_CHI
#             command-line: --default=ALL PROTOCOL=CHI -j $(nproc)
#           - image: ALL_MSI
#             command-line: --default=ALL PROTOCOL=MSI -j $(nproc)
#           - image: ALL_MESI_Two_Level
#             command-line: --default=ALL PROTOCOL=MESI_Two_Level -j $(nproc)
#           - image: NULL_MI_example
#             command-line: --default=NULL PROTOCOL=MI_example -j $(nproc)
#     runs-on: [self-hosted, linux, x64, build]
#     container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
#     outputs:
#       build-name: ${{ steps.artifact-name.outputs.name }}
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           # Scheduled workflows run on the default branch by default. We
#           # therefore need to explicitly checkout the develop branch.
#           ref: develop
#       - id: artifact-name
#         run: echo "name=$(date +"%Y-%m-%d_%H.%M.%S")-" >> $GITHUB_OUTPUT
#       - name: Build gem5
#         run: |
#           scons build/${{ matrix.image }}/gem5.opt ${{ matrix.command-line }}
#       - uses: actions/upload-artifact@v3
#         with:
#           name: ${{ steps.artifact-name.outputs.name }}${{ matrix.image }}
#           path: build/${{ matrix.image }}/gem5.opt
#           retention-days: 5
#       - run: echo "This job's status is ${{ job.status }}."

#   # NULL build added separately since NULL is a keyword in yaml files
#   build-gem5-NULL:
#     runs-on: [self-hosted, linux, x64, build]
#     container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
#     outputs:
#       build-name: ${{ steps.artifact-name.outputs.name }}
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           # Scheduled workflows run on the default branch by default. We
#           # therefore need to explicitly checkout the develop branch.
#           ref: develop
#       - id: artifact-name
#         run: echo "name=$(date +"%Y-%m-%d_%H.%M.%S")-NULL" >> $GITHUB_OUTPUT
#       - name: Build gem5
#         run: |
#           scons build/NULL/gem5.opt -j $(nproc)
#       - uses: actions/upload-artifact@v3
#         with:
#           name: ${{ steps.artifact-name.outputs.name }}
#           path: build/NULL/gem5.opt
#           retention-days: 5
#       - run: echo "This job's status is ${{ job.status }}."

#   unittests-all-debug:
#     strategy:
#       matrix:
#         type: [fast, debug]
#     runs-on: [self-hosted, linux, x64, run]
#     container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
#     timeout-minutes: 60
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           # Scheduled workflows run on the default branch by default. We
#           # therefore need to explicitly checkout the develop branch.
#           ref: develop
#       - name: ALL/unittests.${{ matrix.type }} UnitTests
#         run: scons build/ALL/unittests.${{ matrix.type }} -j $(nproc)

# # start running all of the long tests
#   testlib-long-tests:
#     strategy:
#       matrix:
#         test-type: [arm-boot-tests, fs, gem5_library_example_tests, gpu, insttest_se, learning_gem5, m5threads_test_atomic, memory, multi_isa, replacement-policies, riscv-boot-tests, stdlib, x86-boot-tests]
#     runs-on: [self-hosted, linux, x64, run]
#     container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
#     needs: [build-gem5, build-gem5-NULL]
#     timeout-minutes: 1440 # 24 hours
#     steps:
#     - uses: actions/checkout@v3
#       with:
#         # Scheduled workflows run on the default branch by default. We
#         # therefore need to explicitly checkout the develop branch.
#         ref: develop
#     # download all artifacts for each test
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5.outputs.build-name}}ALL
#         path: build/ALL
#     - run: chmod u+x build/ALL/gem5.opt
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5-ALL_CHI.outputs.build-name}}ALL_CHI
#         path: build/ALL_CHI
#     - run: chmod u+x build/ALL_CHI/gem5.opt
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5-ARM.outputs.build-name}}ARM
#         path: build/ARM
#     - run: chmod u+x build/ARM/gem5.opt
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5-ARM.outputs.build-name}}ALL_MSI
#         path: build/ALL_MSI
#     - run: chmod u+x build/ALL_MSI/gem5.opt
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5-ARM.outputs.build-name}}ALL_MESI_Two_Level
#         path: build/ALL_MESI_Two_Level
#     - run: chmod u+x build/ALL_MESI_Two_Level/gem5.opt
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5-ARM.outputs.build-name}}NULL
#         path: build/NULL
#     - run: chmod u+x build/NULL/gem5.opt
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5-ARM.outputs.build-name}}NULL_MI_example
#         path: build/NULL_MI_example
#     - run: chmod u+x build/NULL_MI_example/gem5.opt
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5-ARM.outputs.build-name}}RISCV
#         path: build/RISCV
#     - run: chmod u+x build/RISCV/gem5.opt
#     - uses: actions/download-artifact@v3
#       with:
#         name: ${{needs.build-gem5-ARM.outputs.build-name}}VEGA_X86
#         path: build/VEGA_X86
#     - run: chmod u+x build/VEGA_X86/gem5.opt
#     # run test
#     - name: long ${{ matrix.test-type }} tests
#       working-directory: ${{ github.workspace }}/tests
#       run: ./main.py run gem5/${{ matrix.image }} --length=long --skip-build -vv -t $(nproc)
#     - name: create zip of results
#       if: success() || failure()
#       run: |
#         apt-get -y install zip
#         zip -r output.zip tests/testing-results
#     - name: upload zip
#       if: success() || failure()
#       uses: actions/upload-artifact@v3
#       env:
#         MY_STEP_VAR: ${{github.job}}_COMMIT.${{github.sha}}_RUN.${{github.run_id}}_ATTEMPT.${{github.run_attempt}}
#       with:
#         name: ${{ env.MY_STEP_VAR }}
#         path: output.zip
#         retention-days: 7
#     - name: Clean runner
#       if: success() || failure()
#       run:
#         rm -rf ./* || true
#         rm -rf ./.??* || true
#         rm -rf ~/.cache || true
#     - run: echo "This job's status is ${{ job.status }}."

  # ensures we have a change-id in every commit, needed for gerrit
  # check-for-change-id:
  #   # runs on github hosted runner
  #   runs-on: [self-hosted, linux, x64, build]
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     # - name: Check for Change-Id
  #     #   run: |
  #     #     for commit in $(git rev-list ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}); do
  #     #         git checkout $commit
  #     #         if !(git log -1 --pretty=format:"%B" | grep -q "Change-Id: ")
  #     #         then
  #     #           echo "One or more of the commits in this pull request is missing a Change-ID, which we require for any changes made to gem5. "\
  #     #           "To automatically insert one, run the following:\n f=`git rev-parse --git-dir`/hooks/commit-msg ; mkdir -p $(dirname $f) ; "\
  #     #           "curl -Lo $f https://gerrit-review.googlesource.com/tools/hooks/commit-msg ; chmod +x $f\n Then amend the commit with git commit --amend --no-edit, and update your pull request."
  #     #           exit 1
  #     #         fi
  #     #     done
  #     - name: Download stuff
  #       run: |
  #         wget https://dist.gem5.org/dist/develop/images/x86/ubuntu-18-04/x86-ubuntu.img.gz --no-check-certificate
  #     - name: Delete stuff
  #       run: |
  #         ls -la ./
  #         # ls -la /actions_runner/_work/_temp/_github_home/.cache
  #         rm -rf ./* || true
  #         rm -rf ./.??* || true
  #         rm -rf ~/.cache || true
  #         ls -la ./
  #         # for commit in $(git rev-list ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}); do
  #         #     git checkout $commit
  #         #     if !(git log -1 --pretty=format:"%s" | grep -q "Change-Id: ")
  #         #     then
  #         #       echo "One or more of the commits in this pull request is missing a Change-ID, which we require for any changes made to gem5. "\
  #         #       "To automatically insert one, run the following:\n f=`git rev-parse --git-dir`/hooks/commit-msg ; mkdir -p $(dirname $f) ; "\
  #         #       "curl -Lo $f https://gerrit-review.googlesource.com/tools/hooks/commit-msg ; chmod +x $f\n Then amend the commit with git commit --amend --no-edit, and update your pull request."
  #         #       exit 1
  #         #     fi
  #         # done


# name: 'Github Workflow History'

# 'on':
#   push:
#     inputs:
#       failJob:
#         description: Fail the job?
#         type: boolean
#         required: true
#         default: false

# jobs:
#   exampleJob:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Pass or fail job
#         run: exit 1
#         if: github.event.inputs.failJob == 'true'

#       - name: Check last job status
#         id: lastJobStatus
#         if: always()
#         run: |
#           LAST_JOB_STATUS=$(gh run list --workflow daily-tests.yaml | grep -oh "completed.*" | head -1 | awk '{print $2}')
#           THIS_JOB_STATUS="${{ job.status }}"
#           if [ "$LAST_JOB_STATUS" != "$THIS_JOB_STATUS" ]; then
#             echo "status changed from $LAST_JOB_STATUS to $THIS_JOB_STATUS"
#           else
#             echo "status is still $THIS_JOB_STATUS"
#           fi
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       - name: Showcase output variable
#         if: always() && steps.lastJobStatus.outputs.changedState == 'true'
#         run: echo "CHANGED STATE!!!"














# name: artifact naming
# run-name: testing change id
# # name: Github Artifacting Tests
# # run-name: Testing artifact usage
# #  https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
# on:
#   # push:
#   workflow_dispatch:
#   pull_request:
#     types: [opened, edited, synchronize, ready_for_review]
#   # pull_request:
#   #   types: [opened, edited, synchronize]

# # This file is an example of using artifact in different runs, for us to utilize in
# # separating jobs amongst different runner
# jobs:
#   check-for-change-id:
#     runs-on: ubuntu-latest
#     # container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
#     steps:
#   #     - uses: actions/checkout@v3
#   # #       with:
#   # # #         # Scheduled workflows run on the default branch by default. We
#   # # #         # therefore need to explicitly checkout the develop branch.
#   # #         ref: ghjghjfhj
#   #     - name: Test
#   #       env:
#   #         GH_TOKEN: ${{ github.token }}
#   #       run: |
#   #         gh pr view --json commits
#       - name: Test
#         run: |
#           commits=${{join(github.event.commits.*.message, ', ') }}
#           echo $commits
#       - uses: actions/github-script@v6
#         env:
#           token: "Change-Id"
#           pattern: ".*"
#         with:
#           script: |
#             const commits = ${{ toJSON( github.event.pull_request.commits) }}
#             for (const commit of commits) {
#               const id = "Change-Id: "
#               const message = commit.message;
#               if (!message.includes(id)) {
#                 core.setFailed('One or more of the commits in this pull request is missing a Change-ID, which we require for any changes made to gem5. ' +
#                 'To automatically insert one, run the following:\n f=`git rev-parse --git-dir`/hooks/commit-msg ; mkdir -p $(dirname $f) ; ' +
#                 'curl -Lo $f https://gerrit-review.googlesource.com/tools/hooks/commit-msg ; chmod +x $f\n Then amend the commit with git commit --amend --no-edit, and update your pull request.')
#               }
#             }

  # build-gem5:
  #   runs-on: [self-hosted, linux, x64, build]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   outputs:
  #     build-name: ${{ steps.artifact-name.outputs.name }}
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         # Scheduled workflows run on the default branch by default. We
  #         # therefore need to explicitly checkout the develop branch.
  #         ref: develop
  #     - id: artifact-name
  #       run: echo "name=$(date +"%Y-%m-%d_%H.%M.%S")-ALL" >> $GITHUB_OUTPUT
  #     - name: Build gem5
  #       run: |
  #         scons build/ALL/gem5.opt -j$(nproc)
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ steps.artifact-name.outputs.name }}
  #         path: build/ALL/gem5.opt
  #         retention-days: 5
  #     - run: echo "This job's status is ${{ job.status }}."

  # build-gem5-ALL_MESI_Two_Level:
  #   runs-on: [self-hosted, linux, x64, build,]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   outputs:
  #     build-name: ${{ steps.artifact-name.outputs.name }}
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         # Scheduled workflows run on the default branch by default. We
  #         # therefore need to explicitly checkout the develop branch.
  #         ref: develop
  #     - id: artifact-name
  #       run: echo "name=$(date +"%Y-%m-%d_%H.%M.%S")-ALL_MESI_Two_Level" >> $GITHUB_OUTPUT
  #     - name: Build gem5
  #       run: |
  #         scons build/ALL_MESI_Two_Level/gem5.opt --default=ALL PROTOCOL=MESI_Two_Level -j $(nproc)
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ steps.artifact-name.outputs.name }}
  #         path: build/ALL_MESI_Two_Level/gem5.opt
  #         retention-days: 5
  #     - run: echo "This job's status is ${{ job.status }}."

  # testlib-long-gem5_library_example_tests:
  #   runs-on: [self-hosted, linux, x64, build]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   needs: [build-gem5, build-gem5-ALL_MESI_Two_Level]
  #   timeout-minutes: 1440 # 24 hours
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       # Scheduled workflows run on the default branch by default. We
  #       # therefore need to explicitly checkout the develop branch.
  #       ref: develop
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.build-gem5.outputs.build-name}}
  #       path: build/ALL
  #   - run: chmod u+x build/ALL/gem5.opt
  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: ${{needs.build-gem5-ALL_MESI_Two_Level.outputs.build-name}}
  #       path: build/ALL_MESI_Two_Level
  #   - run: chmod u+x build/ALL_MESI_Two_Level/gem5.opt
  #   - name: long gem5_library_example_tests
  #     working-directory: ${{ github.workspace }}/tests
  #     run: ./main.py run gem5/gem5_library_example_tests --length=long --skip-build -vv -t $(nproc)
  #   - name: create zip of results
  #     if: success() || failure()
  #     run: |
  #       apt-get -y install zip
  #       zip -r output.zip tests/testing-results
  #   - name: upload zip
  #     if: success() || failure()
  #     uses: actions/upload-artifact@v3
  #     env:
  #       MY_STEP_VAR: ${{github.job}}_COMMIT.${{github.sha}}_RUN.${{github.run_id}}_ATTEMPT.${{github.run_attempt}}
  #     with:
  #       name: ${{ env.MY_STEP_VAR }}
  #       path: output.zip
  #       retention-days: 7
  #   - run: echo "This job's status is ${{ job.status }}."
