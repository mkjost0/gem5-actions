name: gem5art
run-name: gem5art tests

# name: Github Artifacting Tests
# run-name: Testing artifact usage
#  https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
on: [push]
  # schedule:
  #   - cron:  '0 * * 1 *' # this only runs once a year, for files that aren't being tested

# This file is an example of using artifacts in different runs, for us to utilize in
# separating jobs amongst different runners
jobs:

  # gem5art-unittests:
  #   runs-on: [self-hosted, Linux, X64, run]
  #   container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
  #   timeout-minutes: 15
  #   steps:
  #   - uses: actions/checkout@v3
  #   # - name: Setup the virtual environment
  #   #   working-directory: ${{ github.workspace }}
  #   #   run: |
  #   #     mkdir -p .pyenv
  #   #     python3 -m venv .pyenv
  #   #     source .pyenv/bin/activate
  #   - name: Install the packages
  #     working-directory: ${{ github.workspace }}
  #     run: |
  #       git config --global --add safe.directory /__w/gem5-actions/gem5-actions
  #       pip install -e util/gem5art/artifact
  #       pip install -e util/gem5art/run
  #       pip install -e util/gem5art/tasks
  #   - run: echo "This job's status is ${{ job.status }}."
  #   - name: The gem5art.artifact Unittests
  #     working-directory: ${{ github.workspace }}/util/gem5art/artifact
  #     run: |
  #       python3 -m unittest
  #       mypy -p gem5art.artifact
  #   - name: The gem5art.run Unittests
  #     working-directory: ${{ github.workspace }}/util/gem5art/run
  #     run: |
  #       python3 -m unittest
  #       mypy -p gem5art.run
  #   - name: The gem5art.tasks Unittests
  #     working-directory: ${{ github.workspace }}/util/gem5art/tasks
  #     run: |
  #       python3 -m unittest
  #       mypy -p gem5art.tasks
  #   - run: echo "This job's status is ${{ job.status }}."
  Test-Upload:
    runs-on: [self-hosted, linux, x64, run]
    # running container with only a single arguement passes the image being used
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest

    steps:
    # checks out repository, should be more useful when
    # running checks on changed files
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build and run gem5
        run: |
          scons build/ALL/gem5.opt -j $(nproc)

      - uses: actions/upload-artifact@v3
        with:
          name: gem5-artifact1
          path: build/ALL/gem5.opt

      - run: echo "üçè This job's status is ${{ job.status }}."

  Test-Download:
    runs-on: [self-hosted, linux, x64, run]
    # running container with only a single arguement passes the image being used
    container: gcr.io/gem5-test/ubuntu-22.04_all-dependencies:latest
    needs: Test-Upload

    steps:
    # checks out repository, should be more useful when
    # running checks on changed files
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          name: gem5-artifact1
          path: build/ALL/gem5.opt

      - name: Display structure of downloaded files
        run: ls -R
        # working-directory: build/X86

      # double checking that steps are run chronologically
      - name: Run gem5 separately (memory_traffic.py)
        run: |
          chmod u+x build/ALL/gem5.opt
          cd tests
          ./main.py run --length=long gem5/cpu_tests/ --skip-build

      - run: echo "üçè This job's status is ${{ job.status }}."
